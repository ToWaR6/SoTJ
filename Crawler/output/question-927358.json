{"question": {"questionId": 927358, "selectedAnswer": 927386, "userId": 63550, "tags": ["git", "git-commit", "git-reset", "git-revert", "git", "git-commit", "git-reset", "git-revert"], "relatedQuestions": ["https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree", "https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits", "https://stackoverflow.com/questions/348170/how-to-undo-git-add-before-commit", "https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files", "https://stackoverflow.com/questions/1628563/move-the-most-recent-commits-to-a-new-branch-with-git", "https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch", "https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely", "https://stackoverflow.com/questions/2765421/how-do-i-push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too", "https://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit", "https://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch"], "answers": [{"userId": 1709587, "comments": [{"content": "And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do.", "commentId": 4110794, "date": "2010-10-05 15:44:20Z", "userId": 10259, "upvoteCount": 0}, {"content": "If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1.  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1.", "commentId": 6443962, "date": "2011-04-13 14:15:10Z", "userId": 5486, "upvoteCount": 0}, {"content": "Also, in zsh you have to quote ^, so git reset --soft 'HEAD^'... at least I did", "commentId": 9674538, "date": "2011-10-27 18:24:16Z", "userId": 176841, "upvoteCount": 0}, {"content": "(Correction to what I wrote above; --mixed is the default.  --mixed means to keep the changed files, but not keep them in the index.  --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.)", "commentId": 10020433, "date": "2011-11-17 02:40:53Z", "userId": 5486, "upvoteCount": 0}, {"content": "zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^", "commentId": 21084878, "date": "2013-02-21 17:47:56Z", "userId": 166128, "upvoteCount": 0}], "content": "\r\nUndo a commit and redo\n\n$ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)\n\n\n\nThis is what you want to undo\nThis leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status, and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message1, you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1) but leaves your existing changes staged.\nMake corrections to working tree files.\ngit add anything that you want to include in your new commit.\nCommit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.\n\n\n\n\n1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message. The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend, which will open your default commit message editor pre-populated with the last commit message. \n\nBeware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.\n\n---- Edit by Frank R. 2018-3-9\n\nIf the code is already pushed to your server and you have permissions to overwrite history (rebase) then:\n\ngit push origin master --force\n\n\n\n\nYou can also look at this answer:\nHow to move HEAD back to a previous location? (Detached head)\n\nThe above answer will show you git reflog which is used to find out what is the SHA-1 which you wish to revert to. Once you found the point to which you wish to undo to use the sequence of commands as explained above.\n    ", "answerId": 927386, "date": "", "upvoteCount": 18738}, {"userId": 5486, "comments": [{"content": "@dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS.", "commentId": 11945697, "date": "2012-02-25 15:02:44Z", "userId": 5486, "upvoteCount": 0}, {"content": "Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id>. Saves having to re-create commits!", "commentId": 14630150, "date": "2012-06-22 13:11:11Z", "userId": 210945, "upvoteCount": 0}, {"content": "For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options.", "commentId": 14720371, "date": "2012-06-26 15:56:52Z", "userId": 282843, "upvoteCount": 0}, {"content": "It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git.", "commentId": 14896088, "date": "2012-07-03 19:13:35Z", "userId": 618369, "upvoteCount": 0}, {"content": "Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin :", "commentId": 29556901, "date": "2013-11-08 23:43:18Z", "userId": 175169, "upvoteCount": 0}], "content": "\r\nUndoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.\n\nSay you have this, where C is your HEAD and (F) is the state of your files.\n\n   (F)\nA-B-C\n    \u2191\n  master\n\n\nYou want to nuke commit C and never see it again.  You do this:\n\ngit reset --hard HEAD~1\n\n\nThe result is:\n\n (F)\nA-B\n  \u2191\nmaster\n\n\nNow B is the HEAD.  Because you used --hard, your files are reset to their state at commit B.\n\nAh, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:\n\n   (F)\nA-B-C\n    \u2191\n  master\n\n\nYou can do this, leaving off the --hard:\n\ngit reset HEAD~1\n\n\nIn this case the result is:\n\n   (F)\nA-B-C\n  \u2191\nmaster\n\n\nIn both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1, you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!\n\nFor the lightest touch, you can even undo your commit but leave your files and your index:\n\ngit reset --soft HEAD~1\n\n\nThis not only leaves your files alone, it even leaves your index alone.  When you do git status, you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.\n\nOne more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all?  Tough luck, right?\n\nNope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:\n\ngit checkout -b someNewBranchName shaYouDestroyed\n\n\nYou've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of.\n    ", "answerId": 6866485, "date": "2011-07-28 22:22:20Z", "upvoteCount": 9602}, {"userId": 48523, "comments": [{"content": "I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :)", "commentId": 7916341, "date": "2011-07-14 08:32:53Z", "userId": 149008, "upvoteCount": 0}, {"content": "@riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\"", "commentId": 31457718, "date": "2014-01-06 08:37:25Z", "userId": 1069083, "upvoteCount": 0}, {"content": "This was most helpful to me. I needed to know how to revert a public commit. Thanks!", "commentId": 83898855, "date": "2018-01-25 22:25:02Z", "userId": 2482605, "upvoteCount": 0}], "content": "\r\nThis took me a while to figure out, so maybe this will help someone...\n\nThere are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):\n\nHow to undo a local commit\n\nLet's say I committed locally, but now want to remove that commit.\n\ngit log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want\n\n\nTo restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD:\n\ngit reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made\n\n\nNow git log will show that our last commit has been removed.\n\nHow to undo a public commit\n\nIf you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).\n\ngit revert HEAD\n\n\nYour changes will now be reverted and ready for you to commit:\n\ngit commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need\n\n\nFor more info, check out Git Basics - Undoing Things\n    ", "answerId": 6376039, "date": "2011-06-16 17:27:23Z", "upvoteCount": 1697}, {"userId": 36723, "comments": [{"content": "Does this work when I did a git commit --amend and what I really meant to do is a git commit?", "commentId": 6993499, "date": "2011-05-18 13:07:31Z", "userId": 569885, "upvoteCount": 0}, {"content": "@dbm, if you accidentally amended, use git reset --soft <oldref>, where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit.", "commentId": 6994993, "date": "2011-05-18 14:20:48Z", "userId": 36723, "upvoteCount": 0}, {"content": "@Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\".", "commentId": 11415571, "date": "2012-02-01 03:08:06Z", "userId": 36723, "upvoteCount": 0}], "content": "\r\nAdd/remove files to get things the way you want:\n\ngit rm classdir\ngit add sourcedir\n\n\nThen amend the commit:\n\ngit commit --amend\n\n\nThe previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.\n\nNote that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally.\n    ", "answerId": 927397, "date": "2009-05-29 18:16:26Z", "upvoteCount": 1602}, {"userId": 66445, "comments": [{"content": "\"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit.", "commentId": 735260, "date": "2009-05-29 18:26:59Z", "userId": 62130, "upvoteCount": 0}, {"content": "You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler.", "commentId": 6481421, "date": "2011-04-15 13:33:03Z", "userId": 138881, "upvoteCount": 0}, {"content": "git commit -a -m \"\" or git commit -am \"\" naturally! :]", "commentId": 37635032, "date": "2014-06-21 16:31:59Z", "userId": 1469208, "upvoteCount": 0}, {"content": "Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash, then git stash pop", "commentId": 56081980, "date": "2015-12-08 22:30:29Z", "userId": 2555263, "upvoteCount": 0}], "content": "\r\ngit rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"\n\n\nor\n\ngit reset --hard HEAD~1\n\n\nWarning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.\n\nThe hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit.\n    ", "answerId": 927378, "date": "2009-05-29 18:13:07Z", "upvoteCount": 850}, {"userId": 405550, "comments": [], "content": "\r\nTo change the last commit\n\nReplace the files in the index:\n\ngit rm --cached *.class\ngit add *.java\n\n\nThen, if it's a private branch, amend the commit:\n\ngit commit --amend\n\n\nOr, if it's a shared branch, make a new commit:\n\ngit commit -m 'Replace .class files with .java files'\n\n\n\n(to change a previous commit, use the awesome interactive rebase)\n\n\n\nProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.\n\n\n\nTo revert a commit\n\nAmending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset.\n\nYou can reset git to any commit with:\n\ngit reset @~N\n\n\nWhere N is the number of commits before HEAD, and @~ resets to the previous commit.\n\nSo, instead of amending the commit, you could use:\n\ngit reset @~\ngit add *.java\ngit commit -m \"Add .java files\"\n\n\nCheck out git help reset, specifically the sections on --soft --mixed and --hard, for a better understanding of what this does.\n\nReflog\n\nIf you mess up, you can always use the reflog to find dropped commits:\n\n$ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started\n\n\n\n    ", "answerId": 3377569, "date": "2010-07-31 09:39:13Z", "upvoteCount": 664}, {"userId": 121531, "comments": [{"content": "If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit.", "commentId": 14742152, "date": "2012-06-27 11:02:58Z", "userId": 22237, "upvoteCount": 0}, {"content": "What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch?", "commentId": 44262353, "date": "2015-01-13 22:05:57Z", "userId": 943022, "upvoteCount": 0}, {"content": "I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes.", "commentId": 57732857, "date": "2016-01-25 21:07:16Z", "userId": 3502119, "upvoteCount": 0}, {"content": "I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party.", "commentId": 67592334, "date": "2016-10-20 18:19:50Z", "userId": 1803879, "upvoteCount": 0}], "content": "\r\nUse git revert commit-id\n\nTo get the commit ID, just use git log\n    ", "answerId": 10757800, "date": "2012-05-25 16:04:29Z", "upvoteCount": 533}, {"userId": 1996609, "comments": [{"content": "@SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d.", "commentId": 56283123, "date": "2015-12-14 15:34:11Z", "userId": 1996609, "upvoteCount": 0}, {"content": "clear and easy to understand, save my night !", "commentId": 85574665, "date": "2018-03-14 19:10:32Z", "userId": 5809937, "upvoteCount": 0}, {"content": "Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies.", "commentId": 86491044, "date": "2018-04-09 17:20:46Z", "userId": 152876, "upvoteCount": 0}], "content": "\r\nIf you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.\n\ngit reset --hard HEAD^1\n\n\n(This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add) then do the following command.\n\ngit reset --soft HEAD^1\n\n\nNow your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command\n\ngit reset HEAD\n\n\nNow committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.\n\nMore\n    ", "answerId": 14620228, "date": "2013-01-31 07:06:10Z", "upvoteCount": 427}, {"userId": 9021, "comments": [], "content": "\r\nIf you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits.\n    ", "answerId": 8487487, "date": "2011-12-13 10:18:31Z", "upvoteCount": 419}, {"userId": 78336, "comments": [{"content": "Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too.", "commentId": 18924301, "date": "2012-12-07 16:02:12Z", "userId": 425313, "upvoteCount": 0}, {"content": "Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently.", "commentId": 18944655, "date": "2012-12-08 14:14:43Z", "userId": 78336, "upvoteCount": 0}, {"content": "\"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451", "commentId": 26496284, "date": "2013-08-07 10:10:25Z", "userId": 334451, "upvoteCount": 4}, {"content": "fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :)", "commentId": 37610757, "date": "2014-06-20 15:31:54Z", "userId": 1220243, "upvoteCount": 0}], "content": "\r\nI wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.\n\nprompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt>\n\n    ", "answerId": 10044540, "date": "2012-04-06 13:58:52Z", "upvoteCount": 387}, {"userId": 1002260, "comments": [], "content": "\r\nI prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right.\n\nChoose how many commits you want to list, then invoke like this (to enlist last three)\n\ngit rebase -i HEAD~3\n\n\nSample list\n\npick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support\n\n\nThen git will remove commits for any line that you remove.\n    ", "answerId": 13061212, "date": "2012-10-25 03:41:20Z", "upvoteCount": 374}, {"userId": 86967, "comments": [{"content": "gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit.", "commentId": 41533928, "date": "2014-10-18 23:38:11Z", "userId": 86967, "upvoteCount": 4}, {"content": "It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset", "commentId": 52649525, "date": "2015-09-04 04:52:01Z", "userId": 85306, "upvoteCount": 2}, {"content": "See also: stackoverflow.com/a/30598953", "commentId": 60449136, "date": "2016-04-05 04:20:04Z", "userId": 86967, "upvoteCount": 0}, {"content": "I think 'private'/'public' would more correctly be 'local'/'remote'.", "commentId": 86082673, "date": "2018-03-28 14:59:27Z", "userId": 86967, "upvoteCount": 0}], "content": "\r\nHow to fix the previous local commit\n\nUse git-gui (or similar) to perform a git commit --amend. From the GUI you can add or remove individual files from the commit. You can also modify the commit message. \n\nHow to undo the previous local commit\n\nJust reset your branch to the previous location (for example, using gitk or git rebase). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1.\n\nWord of warning: Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.\n\nHow to undo a public commit\n\nPerform a reverse cherry pick (git-revert) to undo the changes.\n\nIf you haven't yet pulled other changes onto your branch, you can simply do...\n\ngit revert --no-edit HEAD\n\n\nThen push your updated branch to the shared repository.\n\nThe commit history will show both commits, separately.\n\n\n\nAdvanced: Correction of private branch in public repository\n\nThis can be dangerous -- be sure you have a local copy of the branch to repush.\n\nAlso note: You don't want to do this if someone else may be working on the branch.\n\ngit push --delete (branch_name) ## remove public version of branch\n\n\nCleanup your branch locally then repush...\n\ngit push origin (branch_name)\n\n\nIn the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history.\n    ", "answerId": 16175525, "date": "", "upvoteCount": 350}, {"userId": 3655052, "comments": [{"content": "I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions?", "commentId": 42343566, "date": "2014-11-12 19:36:02Z", "userId": 892487, "upvoteCount": 0}, {"content": "Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit.", "commentId": 43133073, "date": "2014-12-07 00:38:49Z", "userId": 191246, "upvoteCount": 1}], "content": "\r\nIf you have committed junk but not pushed,\n\ngit reset --soft HEAD~1\n\n\n\n  HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.\n  \n  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \"--hard\" instead.\n\n\nOR\n\n\n  If you already pushed and someone pulled which is usually my case, you can't use git reset. You can however do a git revert,\n\n\ngit revert HEAD\n\n\n\n  This will create a new commit that reverses everything introduced by the accidental commit.\n\n    ", "answerId": 25638420, "date": "", "upvoteCount": 291}, {"userId": 2349141, "comments": [{"content": "Should be marked as answer, because you can specify which SHA you want.", "commentId": 77703607, "date": "2017-07-28 10:49:14Z", "userId": 5508693, "upvoteCount": 1}, {"content": "What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\".", "commentId": 79872792, "date": "2017-09-27 23:30:18Z", "userId": 4242086, "upvoteCount": 0}, {"content": "@JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA", "commentId": 79895034, "date": "2017-09-28 13:10:31Z", "userId": 2349141, "upvoteCount": 1}, {"content": "Really like -f. This is what other answers lack", "commentId": 85096400, "date": "2018-03-01 08:58:05Z", "userId": 4786315, "upvoteCount": 0}], "content": "\r\nIf you want to permanently undo it and you have cloned some repository \n\nThe commit id can be seen by \n\ngit log \n\n\nThen you can do -\n\ngit reset --hard <commit_id>\n\ngit push origin <branch_name> -f\n\n    ", "answerId": 16609755, "date": "", "upvoteCount": 286}, {"userId": 1243378, "comments": [], "content": "\r\nOn SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.\n\nOn the terminal:\n\nYou may alternatively use:\n\ngit revert\n\n\nOr:\n\ngit reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes.\n\n    ", "answerId": 17362437, "date": "", "upvoteCount": 243}, {"userId": 1133932, "comments": [{"content": "I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt.", "commentId": 35557657, "date": "2014-04-23 09:13:35Z", "userId": 957286, "upvoteCount": 0}, {"content": "It should work without any quotes.", "commentId": 68310421, "date": "2016-11-10 19:19:44Z", "userId": 576372, "upvoteCount": 0}], "content": "\r\nA single command:\n\ngit reset --soft 'HEAD^' \n\n\nIt works great to undo the last local commit!\n    ", "answerId": 22199804, "date": "", "upvoteCount": 229}, {"userId": 5423108, "comments": [], "content": "\r\nJust reset it doing the command below using git:\n\ngit reset --soft HEAD~1\n\n\nExplain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^), it will go back only one commit which what you want...\n\nI create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:\n\n\n    ", "answerId": 44672195, "date": "", "upvoteCount": 200}, {"userId": 1379514, "comments": [], "content": "\r\nHow to undo the last Git commit?\n\nTo restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.\n\n\nIf you don't want to keep your changes that you made:\n\ngit reset --hard HEAD^\n\nIf you want to keep your changes:\n\ngit reset --soft HEAD^\n\n\n\nNow check your git log. It will show that our last commit has been removed.\n    ", "answerId": 23242764, "date": "", "upvoteCount": 196}, {"userId": 20960584, "comments": [], "content": "\r\nUse reflog to find a correct state\n\ngit reflog\n\n\n\nREFLOG BEFORE RESET\n\nSelect the correct reflog (f3cb6e2 in my case) and type \n\ngit reset --hard f3cb6e2\n\n\nAfter that the repo HEAD will be reset to that HEADid\n\nLOG AFTER RESET\n\nFinally the reflog looks like the picture below\n\n\nREFLOG FINAL\n    ", "answerId": 20960584, "date": "", "upvoteCount": 161}, {"userId": 1496927, "comments": [], "content": "\r\n\"Reset the working tree to the last commit\"\n\ngit reset --hard HEAD^ \n\n\n\"Clean unknown files from the working tree\"\n\ngit clean    \n\n\nsee - Git Quick Reference\n\nNOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013\n    ", "answerId": 19159566, "date": "", "upvoteCount": 146}, {"userId": 2700225, "comments": [], "content": "\r\nFirst run: \n\ngit reflog\n\n\nIt will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.\n\nThen do:\n\ngit reset --hard ActionIdFromRefLog\n\n    ", "answerId": 19320941, "date": "", "upvoteCount": 143}, {"userId": 811519, "comments": [], "content": "\r\nAnother way:\n\nCheckout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".\n\nThen navigate to your repository's local directory and run this command:\n\ngit -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME\n\n\nThis will erase all commits after the current one in your local repository but only for that one branch.\n    ", "answerId": 16527510, "date": "", "upvoteCount": 128}, {"userId": 3996359, "comments": [], "content": "\r\nUndo last commit:\n\ngit reset --soft HEAD^ or git reset --soft HEAD~\n\nThis will undo the last commit.\n\nHere --soft means reset into staging.\n\nHEAD~ or HEAD^ means to move to commit before HEAD.\n\n\n\nReplace last commit to new commit:\n\ngit commit --amend -m \"message\"\n\n\nIt will replace the last commit with the new commit.\n    ", "answerId": 35826537, "date": "", "upvoteCount": 124}, {"userId": 63550, "comments": [], "content": "\r\nType git log and find the last commit hash code and then enter:\n\ngit reset <the previous co>\n\n    ", "answerId": 16565962, "date": "", "upvoteCount": 122}, {"userId": 811535, "comments": [], "content": "\r\nIn my case I accidentally committed some files I did not want to. So I did the following and it worked:\n\ngit reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD\n\n\nVerify the results with gitk or git log --stat\n    ", "answerId": 17716319, "date": "", "upvoteCount": 119}, {"userId": 702601, "comments": [], "content": "\r\nThere are two main scenarios\n\nYou haven't pushed the commit yet\n\nIf the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend\n\ngit rm <pathToFile>\n\n\nYou can also remove entire directories with -r, or even combine with other Bash commands\n\ngit rm -r <pathToDirectory>\ngit rm $(find -name '*.class')\n\n\nAfter removing the files, you can commit, with --amend option\n\ngit commit --amend -C HEAD # the -C option is to use the same commit message\n\n\nThis will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.\n\nYou already pushed the commit\n\nYou can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).\n\nInstead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit).\n    ", "answerId": 25811069, "date": "", "upvoteCount": 105}, {"userId": 63550, "comments": [], "content": "\r\nUse SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it.\n    ", "answerId": 18516122, "date": "", "upvoteCount": 105}, {"userId": 4480164, "comments": [], "content": "\r\nSimple, run this in your command line:\n\ngit reset --soft HEAD~ \n\n    ", "answerId": 34635179, "date": "", "upvoteCount": 91}, {"userId": 2418867, "comments": [{"content": "Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further.", "commentId": 42733563, "date": "2014-11-24 22:35:29Z", "userId": 455269, "upvoteCount": 0}, {"content": "If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026, stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959.", "commentId": 42733703, "date": "2014-11-24 22:40:57Z", "userId": 455269, "upvoteCount": 4}, {"content": "Use --soft to keep your changes as uncommitted changes, --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet.", "commentId": 46131721, "date": "2015-03-09 09:11:06Z", "userId": 936957, "upvoteCount": 0}, {"content": "@Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are, as you said, completely thrown away by git reset --hard.", "commentId": 66277381, "date": "2016-09-13 21:17:10Z", "userId": 455269, "upvoteCount": 0}, {"content": "As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information).", "commentId": 66277535, "date": "2016-09-13 21:22:52Z", "userId": 455269, "upvoteCount": 0}], "content": "\r\nTo reset to the previous revision, permanently deleting all uncommitted changes: \n\ngit reset --hard HEAD~1\n\n    ", "answerId": 25553225, "date": "", "upvoteCount": 84}, {"userId": 21615125, "comments": [], "content": "\r\nThis article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):\n\nhttp://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\n\nFrom the article, the easiest command I saw to revert a previous commit by its commit id, was:\n\ngit revert dd61ab32\n\n    ", "answerId": 21615125, "date": "", "upvoteCount": 78}, {"userId": 3799762, "comments": [{"content": "git reset --hard HEAD~1 is too dangerous! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit!", "commentId": 72950715, "date": "2017-03-21 12:09:47Z", "userId": 1720476, "upvoteCount": 0}, {"content": "You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch>", "commentId": 74227215, "date": "2017-04-24 13:07:03Z", "userId": 3621912, "upvoteCount": 0}], "content": "\r\nThere are many ways to do it:\n\nGit command to undo the last commit/ previous commits:\n\nBasic command to revert the commit in Git is:\n\n$ git reset --hard <COMMIT -ID>\n\n\nor\n\n$ git reset --hard HEAD~<n>\n\n\nCOMMIT-ID: ID for the commit\n\nn:  is number of last commits you want to revert\n\nYou can get the commit id as shown below:\n\n$ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers\n\n\nwhere d81d3f1 and be20eb8 are commit id.\n\nNow let's see some cases:\n\nSuppose you want to revert the last commit 'd81d3f1'. Below are the ways:\n\n$ git reset --hard d81d3f1\n\n\nor\n\n$ git reset --hard HEAD~1\n\n\nSuppose you want to revert the commit 'be20eb8'. Below are the way:\n\n$ git reset --hard be20eb8\n\n\nFor more detailed information you can refer and try out some other commands too for resetting head to a specified state:\n\n$ git reset --help\n\n    ", "answerId": 35472255, "date": "", "upvoteCount": 73}, {"userId": 680334, "comments": [{"content": "After git reset --soft HEAD~1, if you need to unstage files, use: git reset", "commentId": 71956633, "date": "2017-02-23 00:32:36Z", "userId": 1115332, "upvoteCount": 4}], "content": "\r\nIf you want remove files in the last commit, you can use this:  \n\ngit reset --hard HEAD~1\n\n\nAnd if need files in the last commit, you can use this:  \n\ngit reset --soft HEAD~1\n\n    ", "answerId": 41568578, "date": "", "upvoteCount": 70}, {"userId": 1911787, "comments": [], "content": "\r\nFor a local commit\n\ngit reset --soft HEAD~1\n\n\nor if you do not remember exactly in which commit it is, you might use\n\ngit rm --cached <file>\n\n\nFor a pushed commit\n\nThe proper way of removing files from the repository history is using git filter-branch. That is,\n\ngit filter-branch --index-filter 'git rm --cached <file>' HEAD\n\n\nBut I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page.\n    ", "answerId": 22163029, "date": "", "upvoteCount": 67}, {"userId": 6143919, "comments": [{"content": "Or git reset @~", "commentId": 64896543, "date": "2016-08-04 08:36:50Z", "userId": 405550, "upvoteCount": 0}], "content": "\r\nYou can use:\n\ngit reset HEAD@{1}\n\n\nThis command will delete your wrong commit without a Git log.\n    ", "answerId": 38091882, "date": "", "upvoteCount": 55}, {"userId": 27002094, "comments": [], "content": "\r\nUsually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.\n\nMost of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git. \n\nHere's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.\n\nNOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history. \n\nThat said, here's how to fix your most recent fault commit using a GUI:\n\n\nNavigate to your repository on the command line and start the gui with git gui\nChoose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.\nNow change things to how you want them to look and click Commit. \n\n    ", "answerId": 27002094, "date": "", "upvoteCount": 54}, {"userId": 1104402, "comments": [{"content": "The very useful description about differences --soft VS --hard atlassian.com/git/tutorials/\u2026", "commentId": 69538260, "date": "2016-12-15 16:29:21Z", "userId": 4632019, "upvoteCount": 3}, {"content": "One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog.", "commentId": 79277392, "date": "2017-09-11 14:10:59Z", "userId": 384724, "upvoteCount": 0}], "content": "\r\nWHAT TO USE, reset --soft or reset --hard?\n\nI am just adding two cents for @Kyralessa's answer:\n\nIf you are unsure what to use go for --soft (I used this convention to remember it --soft for safe).\n\nWhy ?\n\nIf you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands\n\ngit reset HEAD file.html\ngit checkout -- file.html\n\n\nFull example\n\necho \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes\n\n\nCredits goes to @Kyralessa.\n    ", "answerId": 38629666, "date": "", "upvoteCount": 49}, {"userId": 1074179, "comments": [], "content": "\r\nIf you are working with SourceTree, this will help you.\n\nRight click on the commit then select \"Reset (current branch)/master to this commit\" and last select  \"Soft\" reset.\n\n\n    ", "answerId": 38656254, "date": "", "upvoteCount": 46}, {"userId": 4123945, "comments": [], "content": "\r\nJust undo the last commit: \n\ngit reset --soft HEAD~\n\n\nOr undo the time before last time commit: \n\ngit reset --soft HEAD~2\n\n\nOr undo any previous commit: \n\ngit reset --soft <commitID>\n\n\n(you can get the commitID using git reflog)\n\nWhen you undo a previous commit, remember to clean the workplace with\n\ngit clean\n\n\nMore details can be found in the docs: git-reset\n    ", "answerId": 30118831, "date": "", "upvoteCount": 44}, {"userId": 2696125, "comments": [], "content": "\r\nThink we have code.txt file.\nWe make some changes on it and commit.\nWe can undo this commit in three ways, but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:\n\n\n\nIt means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:\n\n\n\nUndo last commit:\n\n\nNow if we want just undo commit without any other changes, we can use\n\ngit reset --soft HEAD^ \n\n\nIf we want undo commit and its changes (THIS IS DANGEROUS, because your change will lost), we can use\n\ngit reset --hard HEAD^\n\n\nAnd if we want undo commit and remove changes from stage, we can use\n\ngit reset --mixed HEAD^ or in a short form git reset HEAD^\n\n\n\n    ", "answerId": 40672892, "date": "", "upvoteCount": 42}, {"userId": 5733263, "comments": [{"content": "Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026", "commentId": 69538122, "date": "2016-12-15 16:25:41Z", "userId": 4632019, "upvoteCount": 0}], "content": "\r\nTo undo your local commit you use git reset <file>. Also that tutorial is very helpful to show you how it works.\n\nAlternatively, you can use git revert <commit>: reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history).\n    ", "answerId": 34583071, "date": "", "upvoteCount": 41}, {"userId": 1084174, "comments": [], "content": "\r\nA Typical Git Cycle\n\nIn speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,\n\n\nCloning the first time from the remote server\n\ngit clone $project\nPulling from remote (when I don't have a pending local commit to push)\n\ngit pull\nAdding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)\n\ngit add $file1\nRemoving mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)\n\ngit reset $file2\nCommitting file1 which is in $to_be_committed_list\n\ngit commit -m \"commit message description\"\nSyncing local commit with remote repository before pushing\n\ngit pull --rebase\nResolving when conflict occurs prerequisite configure mergetool\n\ngit mergetool #resolve merging here, also can manually merge\nAdding conflict-resolved files, let's say file1:\n\ngit add $file1\nContinuing my previous rebase command\n\ngit rebase --continue\nPushing ready and already synced last local commit\n\ngit push origin head:refs/for/$branch # branch = master, dev, etc.\n\n    ", "answerId": 34547846, "date": "", "upvoteCount": 38}, {"userId": 756246, "comments": [], "content": "\r\nVISUAL STUDIO USERS (2015, etc.)\n\nIf you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.\n\nPer the answer with TONS OF VOTES:\n\nUse this at the command prompt of root of your project to nuke anything that will attempt to get pushed:\n\ngit reset --hard HEAD~1\n\n\nBackup or zip your files just in case you don't wish to lose any work, etc...\n    ", "answerId": 36876212, "date": "", "upvoteCount": 36}, {"userId": 2165423, "comments": [{"content": "\"Working copy\"? Is this a Git concept? Isn't it an SVN concept?", "commentId": 83976300, "date": "2018-01-28 21:36:56Z", "userId": 63550, "upvoteCount": 0}, {"content": "@PeterMortensen yes working copy, its a git concept though", "commentId": 87381551, "date": "2018-05-04 19:46:45Z", "userId": 2165423, "upvoteCount": 0}], "content": "\r\nUndo the Last Commit\n\nThere are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!\n\nIn these cases, the \"reset\" command is your best friend:\n\n$ git reset --soft HEAD~1\n\n\nThe above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.\n\nNote the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.\n\nIf you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.\n\n$ git reset --hard HEAD~1\n\n\n\n    ", "answerId": 46210590, "date": "", "upvoteCount": 35}, {"userId": 4619105, "comments": [], "content": "\r\nYou need to do the easy and fast\n\n    git commit --amend\n\n\nif it's a private branch or\n\n    git commit -m 'Replace .class files with .java files'\n\n\nif it's a shared or public branch.\n    ", "answerId": 30428348, "date": "", "upvoteCount": 31}, {"userId": 4326275, "comments": [], "content": "\r\nI got the commit ID from bitbucket and then did:\n\ngit checkout commitID .\n\n\nExample:\n\ngit checkout 7991072 .\n\n\nAnd it reverted it back up to that working copy of that commit.\n    ", "answerId": 36040444, "date": "", "upvoteCount": 31}, {"userId": 597858, "comments": [], "content": "\r\nSuppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.\n\nFirst we need to correct our local repo by going back to the commit that we desire:\n\ngit reset --hard <previous good commit id where you want local repo to go>\n\n\nNow we forcefully push this good commit on the remote repo by using this command:\n\ngit push --force-with-lease\n\n\nThe 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull).\n    ", "answerId": 43826836, "date": "", "upvoteCount": 27}, {"userId": 31944160, "comments": [], "content": "\r\nIn my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:\n\nOn the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:\n\ngit reset --soft HEAD~1\n\nThis will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:\n\ngit reset FILE\n\n\nWhere \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch.\n    ", "answerId": 31944160, "date": "", "upvoteCount": 26}, {"userId": 31241087, "comments": [], "content": "\r\nUse this command\n\ngit checkout -b old-state 0d1d7fc32\n\n    ", "answerId": 31241087, "date": "", "upvoteCount": 25}, {"userId": 41905003, "comments": [], "content": "\r\nYou have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets\n\nFirst of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.\n\n\n\ngit reflog\n\nYou can always use the reflog as well.\ngit reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit. \n\nEvery time the HEAD is modified there will be a new entry in the reflog.\nThe reflog is similar to unix history command and is kept locally on your machine.\n\ngit reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>\n\n\nUsing the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.\n\n\n\n\n\ngit reset HEAD --hard <commit_id>\n\n\"Move\" your head back to the desired commit.\nGit reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch. \n\nIf those commits are not part of any other branch they will become \"dangle\".\n\"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc.\n\n# This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.\n\n\n\n\nThis schema illustrate which command does what.\nAs you can see there reset && checkout modify the HEAD.\n\n\n    ", "answerId": 41905003, "date": "", "upvoteCount": 25}, {"userId": 3254469, "comments": [], "content": "\r\nUse this command:\n\ngit checkout -b old-state number_commit\n\n    ", "answerId": 41350510, "date": "", "upvoteCount": 24}, {"userId": 34093958, "comments": [], "content": "\r\nRemove a wrong commit that is already pushed to Github\n\ngit push origin +(previous good commit id):(branch name)\n\n\nPlease specify the last good commit id you would like to reset back in Github.\n\nFor example. If latest commit id is wrong then specify the previous commit id in above git command with branch name. \n\nYou can get previous commit id using git log\n    ", "answerId": 34093958, "date": "", "upvoteCount": 22}, {"userId": 3993731, "comments": [], "content": "\r\nYou can always do a git checkout (SHA code) of the previous version and then commit again with the new code.\n    ", "answerId": 34195835, "date": "", "upvoteCount": 22}, {"userId": 2961878, "comments": [], "content": "\r\nIn order to get rid of (all the changes in) last commit, last 2 commits and last n commits:\n\ngit reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n\n\n\nAnd, to get rid of anything after a specific commit:\n\ngit reset --hard <commit sha>\n\n\ne.g., \n\ngit reset --hard 0d12345\n\n\n\n  PS:\n  1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time. \n  \n  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.\n  \n  3- The above commands work in Github for Windows as well.\n\n    ", "answerId": 40445749, "date": "", "upvoteCount": 21}, {"userId": 63550, "comments": [], "content": "\r\nUse:\n\ngit reset HEAD~1 --soft\n\n\nMake changes, add, and commit the changes.\n    ", "answerId": 42512807, "date": "", "upvoteCount": 21}, {"userId": 5566367, "comments": [], "content": "\r\nYou just have to use a single command:\n\ngit reset --soft 'HEAD^' \n\n\nIt works to undo the last local commit to your Git repository.\n    ", "answerId": 41340201, "date": "", "upvoteCount": 18}, {"userId": 1215594, "comments": [], "content": "\r\nReference: How to undo last commit in Git?\n\nIf you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here).\n\nOpen Git Extensions, right click on the commit you want to revert then select \"Revert commit\". \n\n\n\nA popup will be opened (see the screenshot below)\n\n\n\nSelect \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button.\n    ", "answerId": 43128168, "date": "", "upvoteCount": 17}, {"userId": 48801644, "comments": [], "content": "\r\nUndo last commit:\n\ngit reset --soft HEAD^ or git reset --soft HEAD~\n\n\nThis will undo the last commit.\n\nHere --soft means reset into staging.\n\nHEAD~ or HEAD^ means to move to commit before HEAD.\n\nReplace last commit to new commit:\n\ngit commit --amend -m \"message\"\n\n\nIt will replace the last commit with the new commit.\n    ", "answerId": 48801644, "date": "", "upvoteCount": 16}, {"userId": 37510994, "comments": [], "content": "\r\nJust use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename>.\n    ", "answerId": 37510994, "date": "", "upvoteCount": 15}, {"userId": 45456148, "comments": [], "content": "\r\nYou can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.\n\ngit revert HEAD~3\ngit revert <hashcode of commit>\n\n\nSecond is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.\n\ngit reset <hashcode of commit>\ngit reset HEAD~3\n\n\nYou can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary.\n    ", "answerId": 45456148, "date": "", "upvoteCount": 15}, {"userId": 7378175, "comments": [], "content": "\r\nIn IntelliJ IDEA you can just open Git Repository Log by pressing Alt+9, then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\"\n    ", "answerId": 44649998, "date": "", "upvoteCount": 10}, {"userId": 40619708, "comments": [], "content": "\r\n\n\nAssuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert.  Easy as that.\n    ", "answerId": 40619708, "date": "", "upvoteCount": 9}, {"userId": 4632019, "comments": [], "content": "\r\nI have found this site which describes how to undo things that you have committed into the repository.\n\nSome commands:\n\ngit commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit\n\n    ", "answerId": 41168796, "date": "", "upvoteCount": 9}, {"userId": 1048170, "comments": [], "content": "\r\nFor the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers. \n\nSince the commit was not pushed, the remote was unchanged, so:\n\n\nDelete the local repo.\nClone the remote repo.\n\n\nThis is sometimes necessary if your fancy git client goes bye-bye.\nDon't forget to re-commit your saved changes since the last push.\n    ", "answerId": 44790317, "date": "", "upvoteCount": 9}, {"userId": 49025156, "comments": [], "content": "\r\nHere is site: Oh shit, git!.  \n\nHere are many recipes how to undo things in git. Some of them:\n\n\n  Oh shit, I need to change the message on my last commit!\n\n\ngit commit --amend\n# follow prompts to change the commit message\n\n\n\n  Oh shit, I accidentally committed something to master that should have been on a brand new branch!\n\n\n# create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :)\n\n    ", "answerId": 49025156, "date": "", "upvoteCount": 9}, {"userId": 44347830, "comments": [], "content": "\r\nFind the last commit hash code by seeing the log by :\n\ngit log\n\n\nThen\n\ngit reset <the previous co>\n\n    ", "answerId": 44347830, "date": "", "upvoteCount": 8}, {"userId": 45164987, "comments": [], "content": "\r\nHEAD:\n\nBefore reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...\n\ngit commmit:\n\nEach changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset\n\nyou can dive into last commit using 2 method,\n\nMethod 1: ( if you dont know commit number but want to move onto very first) \n\ngit reset HEAD~1  #it will move your head to last commit\n\n\nMethod 2: ( if you know commit you simply reset onto your known commit)\n\ngit reset 0xab3 # commit number \n\nNote:  if you want to know recent commit try this, git log -p -1 \n\nhere is the graphical representation,\n\n\n    ", "answerId": 45164987, "date": "", "upvoteCount": 8}, {"userId": 7178104, "comments": [], "content": "\r\nYou can undo your commits from the local repository, please follow the below scenario.\n\nIn below image I checkout test branch (using Git command git checkout -b test) as a local and check status (using Git command git status) of local branch there is nothing to commit.\n\n\n\nIn the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\").\n\n\"-m is for commit message\"\n\n\n\nIn the next image you can see your commits log whatever you have made commits (Using Git command git log).\n\n\n\nSo in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command.\ngit revert {\"paste your commit id\"}. Example:\n\ngit revert 9ca304ed12b991f8251496b4ea452857b34353e7\n\n\n\n\nI have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.\n\n\n    ", "answerId": 49130829, "date": "", "upvoteCount": 8}, {"userId": 42844988, "comments": [], "content": "\r\ngit reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master\n\n    ", "answerId": 42844988, "date": "", "upvoteCount": 4}, {"userId": 49882301, "comments": [], "content": "\r\nTry this, hard reset to previous commit where those files were not added, then:\n\ngit reset --hard <commit_hash>\n\n\nMake sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier)\n    ", "answerId": 49882301, "date": "", "upvoteCount": 4}, {"userId": 50477973, "comments": [], "content": "\r\nrebasing and dropping commits is best when you want to keep the history clean\nuseful when proposing patches to a public branch etc.\n\nIf you have to drop the topmost commit then the following one liner helps\n\ngit rebase --onto HEAD~1 HEAD\n\n\nBut if you want to drop 1 of many commits you did say\n\na -> b -> c -> d -> master\n\nand you want to drop commit 'c'\n\ngit rebase --onto b c\n\n\nThis will make 'b' as new base of 'd' eliminating 'c'\n    ", "answerId": 50477973, "date": "", "upvoteCount": 4}, {"userId": 50405545, "comments": [], "content": "\r\ngit push --delete (branch_name) //this will be removing the public version of your branch\n\ngit push origin (branch_name) //This will add the previous version back\n\n    ", "answerId": 50405545, "date": "", "upvoteCount": 1}, {"userId": 3996624, "comments": [], "content": "\r\nat my opinion you can try this\n\nprompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt>\n\n    ", "answerId": 50735800, "date": "", "upvoteCount": 0}], "content": "\r\n\r\nI accidentally committed wrong files to Git, but I haven't pushed the commit to the server yet.\n\nHow can I undo those commits from the local repository? \n    ", "comments": [{"content": "Warning: you should only do this if you have not yet pushed the commit to a remote, otherwise you will mess up the history of others who have already pulled the commit from the remote!", "commentId": 48554579, "date": "2015-05-13 21:18:57Z", "userId": 90874, "upvoteCount": 0}, {"content": "Here's a very clear and thorough post about undoing things in git, straight from Github.", "commentId": 49492912, "date": "2015-06-08 19:39:17Z", "userId": 1446845, "upvoteCount": 0}, {"content": "See this guide for Git commits undo on Local, Public and Git Branch How to undo Git Commits like pro", "commentId": 72095415, "date": "2017-02-27 03:53:19Z", "userId": 1939163, "upvoteCount": 0}, {"content": "Before you post a new answer, consider there are already 65+ answers for this question. Make sure that your answer contributes what is not among existing answers.", "commentId": 76131587, "date": "2017-06-15 15:26:36Z", "userId": 1084174, "upvoteCount": 0}, {"content": "What @thSoft said is correct, pushing your commits and then git reset --bla foo requires you a git --force push [--all] [somewhere-else-than-origin]. Note that this is a \"forced-push\" which requires other people do a \"forced-update\". They should not use git pull as this implies a merge, but use git fetch [--all] and then git rebase origin/master (assume that the forced-update came from origin). All [bla] are optional parameters but sometimes needed, for example when you push to more than just one remote repository.", "commentId": 81101052, "date": "2017-11-02 13:21:44Z", "userId": 8401926, "upvoteCount": 0}], "date": "", "title": "How to undo the most recent commits in Git?", "favoriteCount": 5784, "upvoteCount": 17444}, "users": [{"userId": 63550, "reputation": 0, "pseudo": "Peter Mortensen"}, {"userId": 1709587, "reputation": 0, "pseudo": "Mark Amery"}, {"userId": 4623982, "reputation": 193, "pseudo": "Kevin M"}, {"userId": 5486, "reputation": 148338, "pseudo": "Ryan Lundy"}, {"userId": 3995261, "reputation": 2399, "pseudo": "YakovL"}, {"userId": 48523, "reputation": 88530, "pseudo": "Andrew"}, {"userId": 3682162, "reputation": 3638, "pseudo": "Vikrant"}, {"userId": 36723, "reputation": 165819, "pseudo": "bdonlan"}, {"userId": 3448527, "reputation": 35888, "pseudo": "dippas"}, {"userId": 66445, "reputation": 13749, "pseudo": "Lennart Koopmann"}, {"userId": -1, "reputation": 1, "pseudo": "Community"}, {"userId": 405550, "reputation": 23164, "pseudo": "Zaz"}, {"userId": 229044, "reputation": 167638, "pseudo": "meagar"}, {"userId": 121531, "reputation": 19787, "pseudo": "Jaco Pretorius"}, {"userId": 481584, "reputation": 3249, "pseudo": "Quentin Pradet"}, {"userId": 1996609, "reputation": 9291, "pseudo": "Madhan Ayyasamy"}, {"userId": 9021, "reputation": 351782, "pseudo": "nickf"}, {"userId": 78336, "reputation": 28428, "pseudo": "neoneye"}, {"userId": 3375713, "reputation": 6285, "pseudo": "S\u043d\u0430\u0111\u043e\u0448\u0192\u0430\u04fd"}, {"userId": 1002260, "reputation": 1, "pseudo": "Steven Penny"}, {"userId": 86967, "reputation": 0, "pseudo": "nobar"}, {"userId": 3655052, "reputation": 0, "pseudo": "santos_mgr"}, {"userId": 2349141, "reputation": 0, "pseudo": "poorva"}, {"userId": 1243378, "reputation": 0, "pseudo": "Varun Parakh"}, {"userId": 1133932, "reputation": 0, "pseudo": "Manish Shrivastava"}, {"userId": 5423108, "reputation": 0, "pseudo": "Alireza"}, {"userId": 1379514, "reputation": 0, "pseudo": "Ranjithkumar Ravi"}, {"userId": 20960584, "reputation": 0, "pseudo": "Shubham Chaudhary"}, {"userId": 1496927, "reputation": 0, "pseudo": "Ravi_Parmar"}, {"userId": 2700225, "reputation": 0, "pseudo": "U. Ali"}, {"userId": 811519, "reputation": 0, "pseudo": "CommaToast"}, {"userId": 3996359, "reputation": 0, "pseudo": "akshay_rahar"}, {"userId": 811535, "reputation": 0, "pseudo": "egridasov"}, {"userId": 702601, "reputation": 0, "pseudo": "dseminara"}, {"userId": 4480164, "reputation": 0, "pseudo": "ihue"}, {"userId": 2418867, "reputation": 0, "pseudo": "thestar"}, {"userId": 21615125, "reputation": 0, "pseudo": "AmpT"}, {"pseudo": "user3799762", "reputation": 0, "userId": 3799762}, {"pseudo": "ayoob khodadadi", "reputation": 0, "userId": 680334}, {"pseudo": "geoom", "reputation": 0, "userId": 1911787}, {"pseudo": "Min Han", "reputation": 0, "userId": 6143919}, {"pseudo": "Carl", "reputation": 0, "userId": 27002094}, {"pseudo": "amd", "reputation": 0, "userId": 1104402}, {"pseudo": "Alexandr", "reputation": 0, "userId": 1074179}, {"pseudo": "steven", "reputation": 0, "userId": 4123945}, {"pseudo": "Ali Motameni", "reputation": 0, "userId": 2696125}, {"pseudo": "mfathy00", "reputation": 0, "userId": 5733263}, {"pseudo": "Sazzad Hissain Khan", "reputation": 0, "userId": 1084174}, {"pseudo": "Tom Stickel", "reputation": 0, "userId": 756246}, {"pseudo": "Mohit", "reputation": 0, "userId": 2165423}, {"pseudo": "Yahs Hef", "reputation": 0, "userId": 4619105}, {"pseudo": "ioopl", "reputation": 0, "userId": 4326275}, {"pseudo": "KawaiKx", "reputation": 0, "userId": 597858}, {"pseudo": "FraK", "reputation": 0, "userId": 31944160}, {"pseudo": "Jishnu Sukumaran", "reputation": 0, "userId": 31241087}, {"pseudo": "CodeWizard", "reputation": 0, "userId": 41905003}, {"pseudo": "Fadid", "reputation": 0, "userId": 3254469}, {"pseudo": "Vijay", "reputation": 0, "userId": 34093958}, {"pseudo": "shreshta bm", "reputation": 0, "userId": 3993731}, {"pseudo": "Alisa", "reputation": 0, "userId": 2961878}, {"pseudo": "sumeet", "reputation": 0, "userId": 5566367}, {"pseudo": "Ranadheer Reddy", "reputation": 0, "userId": 1215594}, {"pseudo": "ankit patidar", "reputation": 0, "userId": 48801644}, {"pseudo": "hubot", "reputation": 0, "userId": 37510994}, {"pseudo": "Shwetank", "reputation": 0, "userId": 45456148}, {"pseudo": "Krzysztof Walczewski", "reputation": 0, "userId": 7378175}, {"userId": 40619708, "reputation": 0, "pseudo": "Uchiha Itachi"}, {"userId": 4632019, "reputation": 0, "pseudo": "Eugen Konkov"}, {"userId": 1048170, "reputation": 0, "pseudo": "Dominic Cerisano"}, {"userId": 49025156, "reputation": 0, "pseudo": "Eugen Konkov"}, {"userId": 44347830, "reputation": 0, "pseudo": "Praveen Singh"}, {"userId": 45164987, "reputation": 0, "pseudo": "Mohideen ibn Mohammed"}, {"userId": 7178104, "reputation": 0, "pseudo": "Raj S. Rusia"}, {"userId": 42844988, "reputation": 0, "pseudo": "sony vizio"}, {"userId": 49882301, "reputation": 0, "pseudo": "serdarsenay"}, {"userId": 50477973, "reputation": 0, "pseudo": "Khem"}, {"userId": 50405545, "reputation": 0, "pseudo": "Omkaar.K"}, {"userId": 3996624, "reputation": 0, "pseudo": "nageen nayak"}]}