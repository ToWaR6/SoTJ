{"question": {"questionId": 11227809, "tags": ["java", "c++", "performance", "optimization", "branch-prediction", "java", "c++", "performance", "optimization", "branch-prediction"], "relatedQuestions": ["https://stackoverflow.com/questions/8547778/why-are-elementwise-additions-much-faster-in-separate-loops-than-in-a-combined-l", "https://stackoverflow.com/questions/9371238/why-is-reading-lines-from-stdin-much-slower-in-c-than-python", "https://stackoverflow.com/questions/12135518/is-faster-than", "https://stackoverflow.com/questions/14023988/why-is-processing-a-sorted-array-slower-than-an-unsorted-array", "https://stackoverflow.com/questions/21947452/why-is-printing-b-dramatically-slower-than-printing", "https://stackoverflow.com/questions/22146094/why-should-i-use-a-pointer-rather-than-the-object-itself", "https://stackoverflow.com/questions/24101718/swift-performance-sorting-arrays", "https://stackoverflow.com/questions/30216000/why-is-faster-than-list", "https://stackoverflow.com/questions/35531369/why-is-ab-0-faster-than-a-0-b-0-in-java", "https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-my-hand-written-assembly-for-testing-the-collat"], "userId": 87234, "answers": [{"userId": 922184, "comments": [{"content": "@Mysticial To avoid the shifting hack you could write something like int t=-((data[c]>=128)) to generate the mask. This should be faster too. Would be interesting to know if the compiler is clever enough to insert a conditional move or not.", "commentId": 14753395, "date": "2012-06-27 16:47:51Z", "userId": 501183, "upvoteCount": 0}, {"content": "@phonetagger Take a look at this followup question: stackoverflow.com/questions/11276291/\u2026 The Intel Compiler came pretty close to completely getting rid of the outer loop.", "commentId": 15059914, "date": "2012-07-10 17:08:39Z", "userId": 922184, "upvoteCount": 0}, {"content": "@Novelocrat Only half of that is correct. Shifting a 1 into the sign-bit when it is zero is indeed UB. That's because it's signed integer overflow. But shifting a 1 out of the sign-bit is IB. Right-shifting a negative signed integer is IB. You can go into the argument that that C/C++ doesn't require that the top bit be the sign indicator. But implementation details are IB.", "commentId": 26857097, "date": "2013-08-18 21:04:38Z", "userId": 922184, "upvoteCount": 0}, {"content": "@Mysticial Thanks so much for the link. It looks promising. I will go though it. One last request. Sorry, but please don't mind, could you tell me how you could do this int t = (data[c] - 128) >> 31; sum += ~t & data[c]; to replace the original if-condition above?", "commentId": 33835843, "date": "2014-03-08 20:05:22Z", "userId": 2227834, "upvoteCount": 0}, {"content": "The grammar in me wants me to think this should read \"... victim of branch prediction failure\" rather than just \"... victim of branch prediction fail.\"", "commentId": 50193502, "date": "2015-06-27 11:35:58Z", "userId": 1771044, "upvoteCount": 0}], "content": "\r\nYou are a victim of branch prediction fail.\n\n\n\nWhat is Branch Prediction?\n\nConsider a railroad junction:\n\n\nImage by Mecanismo, via Wikimedia Commons. Used under the CC-By-SA 3.0 license.\n\nNow for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.\n\nYou are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.\n\nTrains are heavy and have a lot of inertia. So they take forever to start up and slow down.\n\nIs there a better way? You guess which direction the train will go!\n\n\nIf you guessed right, it continues on.\nIf you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.\n\n\nIf you guess right every time, the train will never have to stop.\nIf you guess wrong too often, the train will spend a lot of time stopping, backing up, and restarting.\n\n\n\nConsider an if-statement: At the processor level, it is a branch instruction:\n\n\n\nYou are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.\n\nModern processors are complicated and have long pipelines. So they take forever to \"warm up\" and \"slow down\".\n\nIs there a better way? You guess which direction the branch will go!\n\n\nIf you guessed right, you continue executing.\nIf you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.\n\n\nIf you guess right every time, the execution will never have to stop.\nIf you guess wrong too often, you spend a lot of time stalling, rolling back, and restarting.\n\n\n\nThis is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.\n\nSo how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every 3 times, you guess the same...\n\nIn other words, you try to identify a pattern and follow it. This is more or less how branch predictors work.\n\nMost applications have well-behaved branches. So modern branch predictors will typically achieve >90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.\n\nFurther reading: \"Branch predictor\" article on Wikipedia.\n\n\n\nAs hinted from above, the culprit is this if-statement:\n\nif (data[c] >= 128)\n    sum += data[c];\n\n\nNotice that the data is evenly distributed between 0 and 255. \nWhen the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.\n\nThis is very friendly to the branch predictor since the branch consecutively goes the same direction many times.\nEven a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.\n\nQuick visualization:\n\nT = branch taken\nN = branch not taken\n\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\n\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\n\n\nHowever, when the data is completely random, the branch predictor is rendered useless because it can't predict random data.\nThus there will probably be around 50% misprediction. (no better than random guessing)\n\ndata[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\n\n       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\n\n\n\n\nSo what can be done?\n\nIf the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.\n\nReplace:\n\nif (data[c] >= 128)\n    sum += data[c];\n\n\nwith:\n\nint t = (data[c] - 128) >> 31;\nsum += ~t & data[c];\n\n\nThis eliminates the branch and replaces it with some bitwise operations.\n\n(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of data[].)\n\nBenchmarks: Core i7 920 @ 3.5 GHz\n\nC++ - Visual Studio 2010 - x64 Release\n\n//  Branch - Random\nseconds = 11.777\n\n//  Branch - Sorted\nseconds = 2.352\n\n//  Branchless - Random\nseconds = 2.564\n\n//  Branchless - Sorted\nseconds = 2.587\n\n\nJava - Netbeans 7.1.1 JDK 7 - x64\n\n//  Branch - Random\nseconds = 10.93293813\n\n//  Branch - Sorted\nseconds = 5.643797077\n\n//  Branchless - Random\nseconds = 3.113581453\n\n//  Branchless - Sorted\nseconds = 3.186068823\n\n\nObservations:\n\n\nWith the Branch: There is a huge difference between the sorted and unsorted data.\nWith the Hack: There is no difference between sorted and unsorted data.\nIn the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.\n\n\nA general rule of thumb is to avoid data-dependent branching in critical loops. (such as in this example)\n\n\n\nUpdate:\n\n\nGCC 4.6.1 with -O3 or -ftree-vectorize on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.\nVC++ 2010 is unable to generate conditional moves for this branch even under /Ox.\nIntel Compiler 11 does something miraculous. It interchanges the two loops, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...\nIf you give the Intel Compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).\n\n\nThis goes to show that even mature modern compilers can vary wildly in their ability to optimize code...\n    ", "answerId": 11227902, "date": "2012-06-27 13:56:42Z", "upvoteCount": 28247}, {"userId": 1011995, "comments": [{"content": "Does branch prediction work better on sorted arrays vs. arrays with different patterns?  For example, for the array --> { 10, 5, 20, 10, 40, 20, ... } the next element in the array from the pattern is 80.  Would this kind of array be sped up by branch prediction in which the next element is 80 here if the pattern is followed?  Or does it usually only help with sorted arrays?", "commentId": 40722655, "date": "2014-09-23 18:58:12Z", "userId": 538458, "upvoteCount": 0}, {"content": "So basically everything I conventionally learned about big-O is out of the window?  Better to incur a sorting cost than a branching cost?", "commentId": 41900025, "date": "2014-10-30 07:51:58Z", "userId": 3206624, "upvoteCount": 0}, {"content": "@AgrimPathak That depends. For not too large input, an algorithm with higher complexity is faster than an algorithm with lower complexity when the constants are smaller for the algorithm with higher complexity. Where the break-even point is can be hard to predict. Also, compare this, locality is important. Big-O is important, but it is not the sole criterion for performance.", "commentId": 41904388, "date": "2014-10-30 10:14:12Z", "userId": 1011995, "upvoteCount": 0}, {"content": "When does branch prediction takes place? When does language will know that array is sorted? I'm thinking of situation of array that looks like: [1,2,3,4,5,...998,999,1000, 3, 10001, 10002] ? will this obscure 3 increase running time? Will it be as long as unsorted array?", "commentId": 42224805, "date": "2014-11-09 13:37:18Z", "userId": 2047418, "upvoteCount": 0}, {"content": "@FilipBartuzi Branch prediction takes place in the processor, below the language level (but the language may offer ways to tell the compiler what's likely, so the compiler can emit code suited to that). In your example, the out-of-order 3 will lead to a branch-misprediction (for appropriate conditions, where 3 gives a different result than 1000), and thus processing that array will likely take a couple dozen or hundred nanoseconds longer than a sorted array would, hardly ever noticeable. What costs time is i high rate of mispredictions, one misprediction per 1000 isn't much.", "commentId": 42225007, "date": "2014-11-09 13:49:37Z", "userId": 1011995, "upvoteCount": 0}], "content": "\r\nBranch prediction.\n\nWith a sorted array, the condition data[c] >= 128 is first false for a streak of values, then becomes true for all later values. That's easy to predict. With an unsorted array, you pay for the branching cost.\n    ", "answerId": 11227877, "date": "2012-06-27 13:54:45Z", "upvoteCount": 3582}, {"userId": 866732, "comments": [{"content": "There's no default optimization level unless you add -O to your GCC command lines. (And you can't have a worst english than mine ;)", "commentId": 14778577, "date": "2012-06-28 14:04:45Z", "userId": 611560, "upvoteCount": 0}, {"content": "I find it hard to believe that the compiler can optimize the ternary-operator better than it can the equivalent if-statement.  You've shown that GCC optimizes the ternary-operator to a conditional move; you haven't shown that it doesn't do exactly the same thing for the if-statement.  In fact, according to Mystical above, GCC does optimize the if-statement to a conditional move, which would make this answer completely incorrect.", "commentId": 14826908, "date": "2012-06-30 15:29:23Z", "userId": 238419, "upvoteCount": 0}, {"content": "@WiSaGaN The code demonstrates nothing, because your two pieces of code compile to the same machine code.  It's critically important that people don't get the idea that somehow the if statement in your example is different from the terenary in your example.  It's true that you own up to the similarity in your last paragraph, but that doesn't erase the fact that the rest of the example is harmful.", "commentId": 17359552, "date": "2012-10-11 03:12:02Z", "userId": 61394, "upvoteCount": 0}, {"content": "@WiSaGaN My downvote would definitely turn into an upvote if you modified your answer to remove the misleading -O0 example and to show the difference in optimized asm on your two testcases.", "commentId": 17360353, "date": "2012-10-11 04:13:03Z", "userId": 61394, "upvoteCount": 0}, {"content": "@UpAndAdam At the moment of the test, VS2010 can't optimize the original branch into a conditional move even when specifying high optimization level, while gcc can.", "commentId": 27729780, "date": "2013-09-14 15:18:02Z", "userId": 866732, "upvoteCount": 0}], "content": "\r\nThe reason why performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in Mysticial's answer.\n\nNow, if we look at the code\n\nif (data[c] >= 128)\n    sum += data[c];\n\n\nwe can find that the meaning of this particular if... else... branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a conditional move statement, which would be compiled into a conditional move instruction: cmovl, in an x86 system. The branch and thus the potential branch prediction penalty is removed.\n\nIn C, thus C++, the statement, which would compile directly (without any optimization) into the conditional move instruction in x86, is the ternary operator ... ? ... : .... So we rewrite the above statement into an equivalent one:\n\nsum += data[c] >=128 ? data[c] : 0;\n\n\nWhile maintaining readability, we can check the speedup factor.\n\nOn an Intel Core i7-2600K @ 3.4\u00a0GHz and Visual Studio 2010 Release Mode, the benchmark is (format copied from Mysticial):\n\nx86\n\n//  Branch - Random\nseconds = 8.885\n\n//  Branch - Sorted\nseconds = 1.528\n\n//  Branchless - Random\nseconds = 3.716\n\n//  Branchless - Sorted\nseconds = 3.71\n\n\nx64\n\n//  Branch - Random\nseconds = 11.302\n\n//  Branch - Sorted\n seconds = 1.830\n\n//  Branchless - Random\nseconds = 2.736\n\n//  Branchless - Sorted\nseconds = 2.737\n\n\nThe result is robust in multiple tests. We get a great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.\n\nNow let's look more closely by investigating the x86 assembly they generate. For simplicity, we use two functions max1 and max2.\n\nmax1 uses the conditional branch if... else ...:\n\nint max1(int a, int b) {\n    if (a > b)\n        return a;\n    else\n        return b;\n}\n\n\nmax2 uses the ternary operator ... ? ... : ...:\n\nint max2(int a, int b) {\n    return a > b ? a : b;\n}\n\n\nOn a x86-64 machine, GCC -S generates the assembly below.\n\n:max1\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %eax\n    cmpl    -8(%rbp), %eax\n    jle     .L2\n    movl    -4(%rbp), %eax\n    movl    %eax, -12(%rbp)\n    jmp     .L4\n.L2:\n    movl    -8(%rbp), %eax\n    movl    %eax, -12(%rbp)\n.L4:\n    movl    -12(%rbp), %eax\n    leave\n    ret\n\n:max2\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %eax\n    cmpl    %eax, -8(%rbp)\n    cmovge  -8(%rbp), %eax\n    leave\n    ret\n\n\nmax2 uses much less code due to the usage of instruction cmovge. But the real gain is that max2 does not involve branch jumps, jmp, which would have a significant performance penalty if the predicted result is not right.\n\nSo why does a conditional move perform better?\n\nIn a typical x86 processor, the execution of an instruction is divided into several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called pipelining.\n\nIn a branch case, the following instruction is determined by the preceding one, so we cannot do pipelining. We have to either wait or predict.\n\nIn a conditional move case, the execution conditional move instruction is divided into several stages, but the earlier stages like Fetch and Decode does not depend on the result of the previous instruction; only latter stages need the result. Thus, we wait a fraction of one instruction's execution time. This is why the conditional move version is slower than the branch when prediction is easy.\n\nThe book Computer Systems: A Programmer's Perspective, second edition explains this in detail. You can check Section 3.6.6 for Conditional Move Instructions, entire Chapter 4 for Processor Architecture, and Section 5.11.2 for a special treatment for Branch Prediction and Misprediction Penalties.\n\nSometimes, some modern compilers can optimize our code to assembly with better performance, sometimes some compilers can't (the code in question is using Visual Studio's native compiler). Knowing the performance difference between branch and conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.\n    ", "answerId": 11237235, "date": "2012-06-28 02:14:03Z", "upvoteCount": 2908}, {"userId": 863980, "comments": [{"content": "If you want to cheat, you might as well take the multiplication outside the loop and do sum*=100000 after the loop.", "commentId": 17358678, "date": "2012-10-11 01:48:01Z", "userId": 81614, "upvoteCount": 0}, {"content": "@Michael - I believe that this example is actually an example of loop-invariant hoisting (LIH) optimization, and NOT loop swap. In this case, the entire inner loop is independent of the outer loop and can therefore be hoisted out of the outer loop, whereupon the result is simply multiplied by a sum over i of one unit =1e5. It makes no difference to the end result, but I just wanted to set the record straight since this is such a frequented page.", "commentId": 21421811, "date": "2013-03-04 12:59:11Z", "userId": 233829, "upvoteCount": 0}, {"content": "Although not in the simple spirit of swapping loops, the inner if at this point could be converted to:  sum += (data[j] >= 128) ? data[j] * 100000 : 0; which the compiler may be able to reduce to cmovge or equivalent.", "commentId": 23798525, "date": "2013-05-15 11:57:16Z", "userId": 1306959, "upvoteCount": 0}, {"content": "The outer loop is to make the time taken by inner loop large enough to profile. So why would you loop swap. At the end, that loop will be removed anyways.", "commentId": 63391713, "date": "2016-06-22 15:45:19Z", "userId": 1874627, "upvoteCount": 0}, {"content": "@saurabheights: Wrong question: why would the compiler NOT loop swap. Microbenchmarks is hard ;)", "commentId": 69964195, "date": "2016-12-29 13:58:53Z", "userId": 147192, "upvoteCount": 0}], "content": "\r\nIf you are curious about even more optimizations that can be done to this code, consider this:\n\nStarting with the original loop:\n\nfor (unsigned i = 0; i < 100000; ++i)\n{\n    for (unsigned j = 0; j < arraySize; ++j)\n    {\n        if (data[j] >= 128)\n            sum += data[j];\n    }\n}\n\n\nWith loop interchange, we can safely change this loop to:\n\nfor (unsigned j = 0; j < arraySize; ++j)\n{\n    for (unsigned i = 0; i < 100000; ++i)\n    {\n        if (data[j] >= 128)\n            sum += data[j];\n    }\n}\n\n\nThen, you can see that the if conditional is constant throughout the execution of the i loop, so you can hoist the if out:\n\nfor (unsigned j = 0; j < arraySize; ++j)\n{\n    if (data[j] >= 128)\n    {\n        for (unsigned i = 0; i < 100000; ++i)\n        {\n            sum += data[j];\n        }\n    }\n}\n\n\nThen, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (/fp:fast is thrown, for example)\n\nfor (unsigned j = 0; j < arraySize; ++j)\n{\n    if (data[j] >= 128)\n    {\n        sum += data[j] * 100000;\n    }\n}\n\n\nThat one is 100,000x faster than before \n    ", "answerId": 11303693, "date": "2012-07-03 02:25:30Z", "upvoteCount": 1992}, {"userId": 134633, "comments": [{"content": "This is scary, in the unsorted list, there should be 50% chance of hitting the add.  Somehow the branch prediction only has a 25% miss rate, how can it do better than 50% miss?", "commentId": 30576818, "date": "2013-12-09 04:00:09Z", "userId": 2383730, "upvoteCount": 0}, {"content": "@tall.b.lo: The 25% is of all branches - there are two branches in the loop, one for data[c] >= 128 (which has a 50% miss rate as you suggest) and one for the loop condition c < arraySize which has ~0% miss rate.", "commentId": 30577316, "date": "2013-12-09 04:29:25Z", "userId": 134633, "upvoteCount": 0}], "content": "\r\nNo doubt some of us would be interested in ways of identifying code that is problematic for the CPU's branch-predictor. The Valgrind tool cachegrind has a branch-predictor simulator, enabled by using the --branch-sim=yes flag. Running it over the examples in this question, with the number of outer loops reduced to 10000 and compiled with g++, gives these results:\n\nSorted:\n\n==32551== Branches:        656,645,130  (  656,609,208 cond +    35,922 ind)\n==32551== Mispredicts:         169,556  (      169,095 cond +       461 ind)\n==32551== Mispred rate:            0.0% (          0.0%     +       1.2%   )\n\n\nUnsorted:\n\n==32555== Branches:        655,996,082  (  655,960,160 cond +  35,922 ind)\n==32555== Mispredicts:     164,073,152  (  164,072,692 cond +     460 ind)\n==32555== Mispred rate:           25.0% (         25.0%     +     1.2%   )\n\n\nDrilling down into the line-by-line output produced by cg_annotate we see for the loop in question:\n\nSorted:\n\n          Bc    Bcm Bi Bim\n      10,001      4  0   0      for (unsigned i = 0; i < 10000; ++i)\n           .      .  .   .      {\n           .      .  .   .          // primary loop\n 327,690,000 10,016  0   0          for (unsigned c = 0; c < arraySize; ++c)\n           .      .  .   .          {\n 327,680,000 10,006  0   0              if (data[c] >= 128)\n           0      0  0   0                  sum += data[c];\n           .      .  .   .          }\n           .      .  .   .      }\n\n\nUnsorted:\n\n          Bc         Bcm Bi Bim\n      10,001           4  0   0      for (unsigned i = 0; i < 10000; ++i)\n           .           .  .   .      {\n           .           .  .   .          // primary loop\n 327,690,000      10,038  0   0          for (unsigned c = 0; c < arraySize; ++c)\n           .           .  .   .          {\n 327,680,000 164,050,007  0   0              if (data[c] >= 128)\n           0           0  0   0                  sum += data[c];\n           .           .  .   .          }\n           .           .  .   .      }\n\n\nThis lets you easily identify the problematic line - in the unsorted version the if (data[c] >= 128) line is causing 164,050,007 mispredicted conditional branches (Bcm) under cachegrind's branch-predictor model, whereas it's only causing 10,006 in the sorted version.\n\n\n\nAlternatively, on Linux you can use the performance counters subsystem to accomplish the same task, but with native performance using CPU counters.\n\nperf stat ./sumtest_sorted\n\n\nSorted:\n\n Performance counter stats for './sumtest_sorted':\n\n  11808.095776 task-clock                #    0.998 CPUs utilized          \n         1,062 context-switches          #    0.090 K/sec                  \n            14 CPU-migrations            #    0.001 K/sec                  \n           337 page-faults               #    0.029 K/sec                  \n26,487,882,764 cycles                    #    2.243 GHz                    \n41,025,654,322 instructions              #    1.55  insns per cycle        \n 6,558,871,379 branches                  #  555.455 M/sec                  \n       567,204 branch-misses             #    0.01% of all branches        \n\n  11.827228330 seconds time elapsed\n\n\nUnsorted:\n\n Performance counter stats for './sumtest_unsorted':\n\n  28877.954344 task-clock                #    0.998 CPUs utilized          \n         2,584 context-switches          #    0.089 K/sec                  \n            18 CPU-migrations            #    0.001 K/sec                  \n           335 page-faults               #    0.012 K/sec                  \n65,076,127,595 cycles                    #    2.253 GHz                    \n41,032,528,741 instructions              #    0.63  insns per cycle        \n 6,560,579,013 branches                  #  227.183 M/sec                  \n 1,646,394,749 branch-misses             #   25.10% of all branches        \n\n  28.935500947 seconds time elapsed\n\n\nIt can also do source code annotation with dissassembly.\n\nperf record -e branch-misses ./sumtest_unsorted\nperf annotate -d sumtest_unsorted\n\n\n\n\n Percent |      Source code & Disassembly of sumtest_unsorted\n------------------------------------------------\n...\n         :                      sum += data[c];\n    0.00 :        400a1a:       mov    -0x14(%rbp),%eax\n   39.97 :        400a1d:       mov    %eax,%eax\n    5.31 :        400a1f:       mov    -0x20040(%rbp,%rax,4),%eax\n    4.60 :        400a26:       cltq   \n    0.00 :        400a28:       add    %rax,-0x30(%rbp)\n...\n\n\nSee the performance tutorial for more details.\n    ", "answerId": 12853037, "date": "2012-10-12 05:53:33Z", "upvoteCount": 1658}, {"userId": 1031591, "comments": [{"content": "You want to bypass the branch-predictor, why? It's an optimization.", "commentId": 23161186, "date": "2013-04-24 17:50:33Z", "userId": 706421, "upvoteCount": 0}, {"content": "Because no branch is better than a branch :-) In a lot of situations this is simply a lot faster... if you're optimizing, it's definitely worth a try. They also use it quite a bit in f.ex. graphics.stanford.edu/~seander/bithacks.html", "commentId": 23168606, "date": "2013-04-24 21:57:13Z", "userId": 1031591, "upvoteCount": 0}, {"content": "In general lookup tables can be fast, but have you ran the tests for this particular condition? You'll still have a branch condition in your code, only now it's moved to the look up table generation part.  You still wouldn't get your perf boost", "commentId": 30989994, "date": "2013-12-19 21:45:03Z", "userId": 21539, "upvoteCount": 0}, {"content": "@Zain if you really want to know... Yes: 15 seconds with the branch and 10 with my version. Regardless, it's a useful technique to know either way.", "commentId": 31021845, "date": "2013-12-20 18:57:29Z", "userId": 1031591, "upvoteCount": 0}, {"content": "Why not sum += lookup[data[j]] where lookup is an array with 256 entries, the first ones being zero and the last ones being equal to the index?", "commentId": 33971695, "date": "2014-03-12 12:17:49Z", "userId": 1403794, "upvoteCount": 0}], "content": "\r\nI just read up on this question and its answers, and I feel an answer is missing.\n\nA common way to eliminate branch prediction that I've found to work particularly good in managed languages is a table lookup instead of using a branch (although I haven't tested it in this case).\n\nThis approach works in general if:\n\n\nIt's a small table and is likely to be cached in the processor\nYou are running things in a quite tight loop and/or the processor can pre-load the data\n\n\nBackground and why\n\nPfew, so what the hell is that supposed to mean?\n\nFrom a processor perspective, your memory is slow. To compensate for the difference in speed, they build in a couple of caches in your processor (L1/L2 cache) that compensate for that. So imagine that you're doing your nice calculations and figure out that you need a piece of memory. The processor will get its 'load' operation and loads the piece of memory into cache - and then uses the cache to do the rest of the calculations. Because memory is relatively slow, this 'load' will slow down your program.\n\nLike branch prediction, this was optimized in the Pentium processors: the processor predicts that it needs to load a piece of data and attempts to load that into the cache before the operation actually hits the cache. As we've already seen, branch prediction sometimes goes horribly wrong -- in the worst case scenario you need to go back and actually wait for a memory load, which will take forever (in other words: failing branch prediction is bad, a memory load after a branch prediction fail is just horrible!).\n\nFortunately for us, if the memory access pattern is predictable, the processor will load it in its fast cache and all is well.\n\nThe first thing we need to know is what is small? While smaller is generally better, a rule of thumb is to stick to lookup tables that are <= 4096 bytes in size. As an upper limit: if your lookup table is larger than 64K it's probably worth reconsidering.\n\nConstructing a table\n\nSo we've figured out that we can create a small table. Next thing to do is get a lookup function in place. Lookup functions are usually small functions that use a couple of basic integer operations (and, or, xor, shift, add, remove and perhaps multiply). You want to have your input translated by the lookup function to some kind of 'unique key' in your table, which then simply gives you the answer of all the work you wanted it to do.\n\nIn this case: >= 128 means we can keep the value, < 128 means we get rid of it. The easiest way to do that is by using an 'AND': if we keep it, we AND it with 7FFFFFFF; if we want to get rid of it, we AND it with 0. Notice also that 128 is a power of 2 -- so we can go ahead and make a table of 32768/128 integers and fill it with one zero and a lot of 7FFFFFFFF's.\n\nManaged languages\n\nYou might wonder why this works well in managed languages. After all, managed languages check the boundaries of the arrays with a branch to ensure you don't mess up...\n\nWell, not exactly... :-)\n\nThere has been quite some work on eliminating this branch for managed languages. For example:\n\nfor (int i=0; i<array.Length; ++i)\n   // Use array[i]\n\n\nIn this case, it's obvious to the compiler that the boundary condition will never be hit. At least the Microsoft JIT compiler (but I expect Java does similar things) will notice this and remove the check altogether. WOW - that means no branch. Similarly, it will deal with other obvious cases.\n\nIf you run into trouble with lookups on managed languages - the key is to add a & 0x[something]FFF to your lookup function to make the boundary check predictable - and watch it going faster.\n\nThe result of this case\n\n// Generate data\nint arraySize = 32768;\nint[] data = new int[arraySize];\n\nRandom rnd = new Random(0);\nfor (int c = 0; c < arraySize; ++c)\n    data[c] = rnd.Next(256);\n\n//To keep the spirit of the code in-tact I'll make a separate lookup table\n// (I assume we cannot modify 'data' or the number of loops)\nint[] lookup = new int[256];\n\nfor (int c = 0; c < 256; ++c)\n    lookup[c] = (c >= 128) ? c : 0;\n\n// Test\nDateTime startTime = System.DateTime.Now;\nlong sum = 0;\n\nfor (int i = 0; i < 100000; ++i)\n{\n    // Primary loop\n    for (int j = 0; j < arraySize; ++j)\n    {\n        // Here you basically want to use simple operations - so no\n        // random branches, but things like &, |, *, -, +, etc. are fine.\n        sum += lookup[data[j]];\n    }\n}\n\nDateTime endTime = System.DateTime.Now;\nConsole.WriteLine(endTime - startTime);\nConsole.WriteLine(\"sum = \" + sum);\n\nConsole.ReadLine();\n\n    ", "answerId": 16184827, "date": "2013-04-24 06:26:28Z", "upvoteCount": 1131}, {"userId": 1012551, "comments": [{"content": "You don't show the timings of the \"random\" TF pattern.", "commentId": 21133170, "date": "2013-02-23 02:31:21Z", "userId": 845092, "upvoteCount": 0}, {"content": "@MooingDuck 'Cause it won't make a difference - that value can be anything, but it still will be in the bounds of these thresholds. So why show a random value when you already know the limits? Although I agree that you could show one for the sake of completeness, and 'just for the heck of it'.", "commentId": 60153643, "date": "2016-03-28 12:58:51Z", "userId": 4037019, "upvoteCount": 0}, {"content": "@cst1992: Right now his slowest timing is TTFFTTFFTTFF, which seems, to my human eye, quite predictable. Random is inherently unpredictable, so it's entirely possible it would be slower still, and thus outside the limits shown here.  OTOH, it could be that TTFFTTFF perfectly hits the pathological case.  Can't tell, since he didn't show the timings for random.", "commentId": 60164274, "date": "2016-03-28 18:27:16Z", "userId": 845092, "upvoteCount": 0}, {"content": "@MooingDuck To a human eye, \"TTFFTTFFTTFF\" is a predictable sequence, but what we are talking about here is the behavior of the branch predictor built into a CPU.  The branch predictor is not AI-level pattern recognition; it's very simple.  When you just alternate branches it doesn't predict well.  In most code, branches go the same way almost all the time; consider a loop that executes a thousand times.  The branch at the end of the loop goes back to the start of the loop 999 times, and then the thousandth time does something different.  A very simple branch predictor works well, usually.", "commentId": 64383305, "date": "2016-07-20 21:07:37Z", "userId": 166949, "upvoteCount": 0}, {"content": "@steveha: I think you're making assumptions about how the CPU branch predictor works, and I disagree with that methodology. I don't know how advanced that branch predictor is, but I seem to think it's far more advanced than you do. You're probably right, but measurements would definitely be good.", "commentId": 64383386, "date": "2016-07-20 21:10:18Z", "userId": 845092, "upvoteCount": 0}], "content": "\r\nAs data is distributed between 0 and 255 when the array is sorted, around the first half of the iterations will not enter the if-statement (the if statement is shared below).\n\nif (data[c] >= 128)\n    sum += data[c];\n\n\nThe question is: What makes the above statement not execute in certain cases as in case of sorted data? Here comes the \"branch predictor\". A branch predictor is a digital circuit that tries to guess which way a branch (e.g. an if-then-else structure) will go before this is known for sure. The purpose of the branch predictor is to improve the flow in the instruction pipeline. Branch predictors play a critical role in achieving high effective performance!\n\nLet's do some bench marking to understand it better\n\nThe performance of an if-statement depends on whether its condition has a predictable pattern. If the condition is always true or always false, the branch prediction logic in the processor will pick up the pattern. On the other hand, if the pattern is unpredictable, the if-statement will be much more expensive.\n\nLet\u2019s measure the performance of this loop with different conditions:\n\nfor (int i = 0; i < max; i++)\n    if (condition)\n        sum++;\n\n\nHere are the timings of the loop with different true-false patterns:\n\nCondition            Pattern                 Time (ms)\n\n(i & 0\u00d780000000) == 0    T repeated          322\n\n(i & 0xffffffff) == 0    F repeated          276\n\n(i & 1) == 0            TF alternating    760\n\n(i & 3) == 0            TFFFTFFF\u2026          513\n\n(i & 2) == 0            TTFFTTFF\u2026          1675\n\n(i & 4) == 0            TTTTFFFFTTTTFFFF\u2026 1275\n\n(i & 8) == 0            8T 8F 8T 8F \u2026     752\n\n(i & 16) == 0            16T 16F 16T 16F \u2026 490\n\n\nA \u201cbad\u201d true-false pattern can make an if-statement up to six times slower than a \u201cgood\u201d pattern! Of course, which pattern is good and which is bad depends on the exact instructions generated by the compiler and on the specific processor.\n\nSo there is no doubt about the impact of branch prediction on performance!\n    ", "answerId": 14889969, "date": "2013-02-15 07:24:16Z", "upvoteCount": 1009}, {"userId": 166949, "comments": [{"content": "Right, you can also just use the bit directly and multiply (data[c]>>7 - which is discussed somewhere here as well); I intentionally left this solution out, but of course you are correct. Just a small note: The rule of thumb for lookup tables is that if it fits in 4KB (because of caching), it'll work - preferably make the table as small as possible. For managed languages I'd push that to 64KB, for low-level languages like C++ and C, I'd probably reconsider (that's just my experience). Since typeof(int) = 4, I'd try to stick to max 10 bits.", "commentId": 26185793, "date": "2013-07-29 12:05:24Z", "userId": 1031591, "upvoteCount": 0}, {"content": "I think indexing with the 0/1 value will probably be faster than an integer multiply, but I guess if performance is really critical you should profile it.  I agree that small lookup tables are essential to avoid cache pressure, but clearly if you have a bigger cache you can get away with a bigger lookup table, so 4KB is more a rule of thumb than a hard rule.  I think you meant sizeof(int) == 4?  That would be true for 32-bit.  My two-year-old cell phone has a 32KB L1 cache, so even a 4K lookup table might work, especially if the lookup values were a byte instead of an int.", "commentId": 26206652, "date": "2013-07-29 22:02:13Z", "userId": 166949, "upvoteCount": 0}, {"content": "Possibly I'm missing something but in your j equals 0 or 1 method why don't you just multiply your value by j before adding it rather than using the array indexing (possibly should be multiplied by 1-j rather than j)", "commentId": 33658701, "date": "2014-03-04 15:38:24Z", "userId": 2187042, "upvoteCount": 0}, {"content": "@steveha Multiplication should be faster, I tried looking it up in the Intel books, but couldn't find it... either way, benchmarking also gives me that result here.", "commentId": 34186464, "date": "2014-03-18 08:45:05Z", "userId": 1031591, "upvoteCount": 0}, {"content": "@steveha P.S.: another possible answer would be int c = data[j]; sum += c & -(c >> 7); which requires no multiplications at all.", "commentId": 34186699, "date": "2014-03-18 08:52:11Z", "userId": 1031591, "upvoteCount": 0}], "content": "\r\nOne way to avoid branch prediction errors is to build a lookup table, and index it using the data.  Stefan de Bruijn discussed that in his answer.\n\nBut in this case, we know values are in the range [0, 255] and we only care about values >= 128.  That means we can easily extract a single bit that will tell us whether we want a value or not: by shifting the data to the right 7 bits, we are left with a 0 bit or a 1 bit, and we only want to add the value when we have a 1 bit.  Let's call this bit the \"decision bit\".\n\nBy using the 0/1 value of the decision bit as an index into an array, we can make code that will be equally fast whether the data is sorted or not sorted.  Our code will always add a value, but when the decision bit is 0, we will add the value somewhere we don't care about.  Here's the code:\n\n// Test\nclock_t start = clock();\nlong long a[] = {0, 0};\nlong long sum;\n\nfor (unsigned i = 0; i < 100000; ++i)\n{\n    // Primary loop\n    for (unsigned c = 0; c < arraySize; ++c)\n    {\n        int j = (data[c] >> 7);\n        a[j] += data[c];\n    }\n}\n\ndouble elapsedTime = static_cast<double>(clock() - start) / CLOCKS_PER_SEC;\nsum = a[1];\n\n\nThis code wastes half of the adds, but never has a branch prediction failure.  It's tremendously faster on random data than the version with an actual if statement.\n\nBut in my testing, an explicit lookup table was slightly faster than this, probably because indexing into a lookup table was slightly faster than bit shifting.  This shows how my code sets up and uses the lookup table (unimaginatively called lut for \"LookUp Table\" in the code).  Here's the C++ code:\n\n// declare and then fill in the lookup table\nint lut[256];\nfor (unsigned c = 0; c < 256; ++c)\n    lut[c] = (c >= 128) ? c : 0;\n\n// use the lookup table after it is built\nfor (unsigned i = 0; i < 100000; ++i)\n{\n    // Primary loop\n    for (unsigned c = 0; c < arraySize; ++c)\n    {\n        sum += lut[data[c]];\n    }\n}\n\n\nIn this case the lookup table was only 256 bytes, so it fit nicely in cache and all was fast.  This technique wouldn't work well if the data was 24-bit values and we only wanted half of them... the lookup table would be far too big to be practical.  On the other hand, we can combine the two techniques shown above: first shift the bits over, then index a lookup table.  For a 24-bit value that we only want the top half value, we could potentially shift the data right by 12 bits, and be left with a 12-bit value for a table index.  A 12-bit table index implies a table of 4096 values, which might be practical.\n\nEDIT: One thing I forgot to put in.\n\nThe technique of indexing into an array, instead of using an if statement, can be used for deciding which pointer to use.  I saw a library that implemented binary trees, and instead of having two named pointers (pLeft and pRight or whatever) had a length-2 array of pointers, and used the \"decision bit\" technique to decide which one to follow.  For example, instead of:\n\nif (x < node->value)\n    node = node->pLeft;\nelse\n    node = node->pRight;\n\n\nthis library would do something like:\n\ni = (x < node->value);\nnode = node->link[i];\n\n\nHere's a link to this code: Red Black Trees, Eternally Confuzzled\n    ", "answerId": 17782979, "date": "2013-07-22 08:29:30Z", "upvoteCount": 938}, {"userId": 1196549, "comments": [{"content": "sum= 3137536 - clever. That's kinda obviously not the point of the question. The question is clearly about explaining surprising performance characteristics. I'm inclined to say that the addition of doing std::partition instead of std::sort is valuable. Though the actual question extends to more than just the synthetic benchmark given.", "commentId": 26040119, "date": "2013-07-24 16:31:30Z", "userId": 85371, "upvoteCount": 0}, {"content": "@DeadMG: this is indeed not the standard dichotomic search for a given key, but a search for the partitioning index; it requires a single compare per iteration. But don't rely on this code, I have not checked it. If you are interested in a guaranteed correct implementation, let me know.", "commentId": 26048383, "date": "2013-07-24 20:37:31Z", "userId": 1196549, "upvoteCount": 0}], "content": "\r\nIn the sorted case, you can do better than relying on successful branch prediction or any branchless comparison trick: completely remove the branch.\n\nIndeed, the array is partitioned in a contiguous zone with data < 128 and another with data >= 128. So you should find the partition point with a dichotomic search (using Lg(arraySize) = 15 comparisons), then do a straight accumulation from that point.\n\nSomething like (unchecked)\n\nint i= 0, j, k= arraySize;\nwhile (i < k)\n{\n  j= (i + k) >> 1;\n  if (data[j] >= 128)\n    k= j;\n  else\n    i= j;\n}\nsum= 0;\nfor (; i < arraySize; i++)\n  sum+= data[i];\n\n\nor, slightly more obfuscated\n\nint i, k, j= (i + k) >> 1;\nfor (i= 0, k= arraySize; i < k; (data[j] >= 128 ? k : i)= j)\n  j= (i + k) >> 1;\nfor (sum= 0; i < arraySize; i++)\n  sum+= data[i];\n\n\nA yet faster approach, that gives an approximate solution for both sorted or unsorted is: sum= 3137536; (assuming a truly uniform distribution, 16384 samples with expected value 191.5) :-)\n    ", "answerId": 17828251, "date": "2013-07-24 07:57:39Z", "upvoteCount": 865}, {"userId": 1627741, "comments": [{"content": "how are two instructions executed together? is this done with separate cpu cores or is pipeline instruction is integrated in single cpu core?", "commentId": 80330289, "date": "2017-10-11 14:49:42Z", "userId": 4767498, "upvoteCount": 1}, {"content": "@M.kazemAkhgary It's all inside one logical core. If you're interested, this is nicely described for example in Intel Software Developer Manual", "commentId": 81130628, "date": "2017-11-03 07:45:12Z", "userId": 6583956, "upvoteCount": 1}], "content": "\r\nThe above behavior is happening because of Branch prediction.\n\nTo understand branch prediction one must first understand Instruction Pipeline:\n\nAny instruction is broken into a sequence of steps so that different steps can be executed concurrently in parallel. This technique is known as instruction pipeline and this is used to increase throughput in modern processors. To understand this better please see this example on Wikipedia.\n\nGenerally, modern processors have quite long pipelines, but for ease let's consider these 4 steps only.\n\n  \n  IF -- Fetch the instruction from memory \n  ID -- Decode the instruction\n  EX -- Execute the instruction \n  WB -- Write back to CPU register\n\n\n4-stage pipeline in general for 2 instructions.\n\n\nMoving back to the above question let's consider the following instructions:\n\n                        A) if (data[c] >= 128)\n                                /\\\n                               /  \\\n                              /    \\\n                        true /      \\ false\n                            /        \\\n                           /          \\\n                          /            \\\n                         /              \\\n              B) sum += data[c];          C) for loop or print().\n\n\nWithout branch prediction, the following would occur:\n\nTo execute instruction B or instruction C the processor will have to wait till the instruction A doesn't reach till EX stage in the pipeline, as the decision to go to instruction B or instruction C depends on the result of instruction A. So the pipeline will look like this.\n\nwhen if condition returns true:\n\n\nWhen if condition returns false:\n\n\nAs a result of waiting for the result of instruction A, the total CPU cycles spent in the above case (without branch prediction; for both true and false) is 7.\n\nSo what is branch prediction?\n\nBranch predictor will try to guess which way a branch (an if-then-else structure) will go before this is known for sure. It will not wait for the instruction A to reach the EX stage of the pipeline, but it will guess the decision and go to that instruction (B or C in case of our example).\n\nIn case of a correct guess, the pipeline looks something like this:\n\n\nIf it is later detected that the guess was wrong then the partially executed instructions are discarded and the pipeline starts over with the correct branch, incurring a delay. \nThe time that is wasted in case of a branch misprediction is equal to the number of stages in the pipeline from the fetch stage to the execute stage. Modern microprocessors tend to have quite long pipelines so that the misprediction delay is between 10 and 20 clock cycles. The longer the pipeline the greater the need for a good branch predictor.\n\nIn the OP's code, the first time when the conditional, the branch predictor does not have any information to base up prediction, so the first time it will randomly choose the next instruction. Later in the for loop, it can base the prediction on the history. \nFor an array sorted in ascending order, there are three possibilities:\n\n\n All the elements are less than 128\n All the elements are greater than 128\n Some starting new elements are less than 128 and later it become greater than 128\n\n\nLet us assume that the predictor will always assume the true branch on the first run.\n\nSo in the first case, it will always take the true branch since historically all its predictions are correct.\nIn the 2nd case, initially it will predict wrong, but after a few iterations, it will predict correctly.\nIn the 3rd case, it will initially predict correctly till the elements are less than 128. After which it will fail for some time and the correct itself when it sees branch prediction failure in history. \n\nIn all these cases the failure will be too less in number and as a result, only a few times it will need to discard the partially executed instructions and start over with the correct branch, resulting in fewer CPU cycles. \n\nBut in case of a random unsorted array, the prediction will need to discard the partially executed instructions and start over with the correct branch most of the time and result in more CPU cycles compared to the sorted array.\n    ", "answerId": 31210295, "date": "2015-07-03 15:35:52Z", "upvoteCount": 676}, {"userId": 4013258, "comments": [], "content": "\r\nAn official answer would be from\n\n\nIntel - Avoiding the Cost of Branch Misprediction\nIntel - Branch and Loop Reorganization to Prevent Mispredicts\nScientific papers - branch prediction computer architecture\nBooks: J.L. Hennessy, D.A. Patterson: Computer architecture: a quantitative approach\nArticles in scientific publications: T.Y. Yeh, Y.N. Patt made a lot of these on branch predictions.\n\n\nYou can also see from this lovely diagram why the branch predictor gets confused.\n\n\n\nEach element in the original code is a random value\n\ndata[c] = std::rand() % 256;\n\n\nso the predictor will change sides as the std::rand() blow.\n\nOn the other hand, once it's sorted, the predictor will first move into a state of strongly not taken and when the values change to the high value the predictor will in three runs through change all the way from strongly not taken to strongly taken.\n\n\n    ", "answerId": 33070112, "date": "2015-10-11 21:05:18Z", "upvoteCount": 598}, {"userId": 1313233, "comments": [], "content": "\r\nIn the same line (I think this was not highlighted by any answer) it's good to mention that sometimes (specially in software where the performance matters\u2014like in the Linux kernel) you can find some if statements like the following:\n\nif (likely( everything_is_ok ))\n{\n    /* Do something */\n}\n\n\nor similarly:\n\nif (unlikely(very_improbable_condition))\n{\n    /* Do something */    \n}\n\n\nBoth likely() and unlikely() are in fact macros that are defined by using something like the GCC's __builtin_expect to help the compiler insert prediction code to favour the condition taking into account the information provided by the user. GCC supports other builtins that could change the behavior of the running program or emit low level instructions like clearing the cache, etc. See this documentation that goes through the available GCC's builtins.\n\nNormally this kind of optimizations are mainly found in hard-real time applications or embedded systems where execution time matters and it's critical. For example, if you are checking for some error condition that only happens 1/10000000 times, then why not inform the compiler about this? This way, by default, the branch prediction would assume that the condition is false.\n    ", "answerId": 32742980, "date": "2015-09-23 14:57:47Z", "upvoteCount": 564}, {"userId": 4895229, "comments": [], "content": "\r\nFrequently used Boolean operations in C++ produce many branches in compiled program. If these branches are inside loops and are hard to predict they can slow down execution significantly. Boolean variables are stored as 8-bit integers with the value 0 for false and 1 for true.\n\nBoolean variables are overdetermined in the sense that all operators that have Boolean variables as input check if the inputs have any other value than 0 or 1, but operators that have Booleans as output can produce no other value than 0 or 1. This makes operations with Boolean variables as input less efficient than necessary.\nConsider example:\n\nbool a, b, c, d;\nc = a && b;\nd = a || b;\n\n\nThis is typically implemented by the compiler in the following way:\n\nbool a, b, c, d;\nif (a != 0) {\n    if (b != 0) {\n        c = 1;\n    }\n    else {\n        goto CFALSE;\n    }\n}\nelse {\n    CFALSE:\n    c = 0;\n}\nif (a == 0) {\n    if (b == 0) {\n        d = 0;\n    }\n    else {\n        goto DTRUE;\n    }\n}\nelse {\n    DTRUE:\n    d = 1;\n}\n\n\nThis code is far from optimal. The branches may take a long time in case of mispredictions. The Boolean operations can be made much more efficient if it is known with certainty that the operands have no other values than 0 and 1. The reason why the compiler does not make such an assumption is that the variables might have other values if they are uninitialized or come from unknown sources. The above code can be optimized if a and b have been initialized to valid values or if they come from operators that produce Boolean output. The optimized code looks like this:\n\nchar a = 0, b = 1, c, d;\nc = a & b;\nd = a | b;\n\n\nchar is used instead of bool in order to make it possible to use the bitwise operators (& and |) instead of the Boolean operators (&& and ||). The bitwise operators are single instructions that take only one clock cycle. The OR operator (|) works even if a and b have other values than 0 or 1. The AND operator (&) and the EXCLUSIVE OR operator (^) may give inconsistent results if the operands have other values than 0 and 1.\n\n~ can not be used for NOT. Instead, you can make a Boolean NOT on a variable which is known to be 0 or 1 by XOR'ing it with 1:\n\nbool a, b;\nb = !a;\n\n\ncan be optimized to:\n\nchar a = 0, b;\nb = a ^ 1;\n\n\na && b cannot be replaced with a & b if b is an expression that should not be evaluated if a is false ( && will not evaluate b, & will). Likewise, a || b can not be replaced with a | b if b is an expression that should not be evaluated if a is true.\n\nUsing bitwise operators is more advantageous if the operands are variables than if the operands are comparisons:\n\nbool a; double x, y, z;\na = x > y && z < 5.0;\n\n\nis optimal in most cases (unless you expect the && expression to generate many branch mispredictions).\n    ", "answerId": 33048998, "date": "2015-10-10 00:30:42Z", "upvoteCount": 538}, {"userId": 601567, "comments": [{"content": "That is a very interesting article (in fact, I have just read all of it), but how does it answer the question?", "commentId": 85643214, "date": "2018-03-16 12:47:19Z", "userId": 63550, "upvoteCount": 1}, {"content": "While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes. - From Review", "commentId": 85645413, "date": "2018-03-16 13:39:58Z", "userId": 4850040, "upvoteCount": 1}, {"content": "@PeterMortensen I am a bit flummoxed by your question. For example here is one relevant line from that piece:  When the input is unsorted, all the rest of the loop takes substantial time. But with sorted input, the processor is somehow able to spend not just less time in the body of the loop, meaning the buckets at offsets 0x18 and 0x1C, but vanishingly little time on the mechanism of looping.  Author is trying to discuss profiling in the context of code posted here and in the process trying to explain why the sorted case is so much more faster.", "commentId": 85650402, "date": "2018-03-16 15:37:16Z", "userId": 601567, "upvoteCount": 0}], "content": "\r\nThis question has already been answered excellently many times over. Still I'd like to draw the group's attention to yet another interesting analysis.\n\nRecently this example (modified very slightly) was also used as a way to demonstrate how a piece of code can be profiled within the program itself on Windows. Along the way, the author also shows how to use the results to determine where the code is spending most of its time in both the sorted & unsorted case. Finally the piece also shows how to use a little known feature of the HAL (Hardware Abstraction Layer) to determine just how much branch misprediction is happening in the unsorted case.\n\nThe link is here:\nhttp://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/profile/demo.htm\n    ", "answerId": 41603849, "date": "2017-01-12 01:50:28Z", "upvoteCount": 207}, {"userId": 5423108, "comments": [], "content": "\r\nThat's for sure!...\n\nBranch prediction makes the logic run slower, because of the switching which happens in your code! It's like you are going a straight street or a street with a lot of turnings, for sure the straight one is going to be done quicker!...\n\nIf the array is sorted, your condition is false at the first step: data[c] >= 128, then becomes a true value for the whole way to the end of the street. That's how you get to the end of the logic faster. On the other hand, using an unsorted array, you need a lot of turning and processing which make your code run slower for sure...\n\nLook at the image I created for you below. Which street is going to be finished faster?\n\n\n\nSo programmatically, branch prediction causes the process to be slower...\n\nAlso at the end, it's good to know we have two kinds of branch predictions that each is going to affect your code differently:\n\n1. Static\n\n2. Dynamic\n\n\n\n\n  Static branch prediction is used by the microprocessor the first time\n  a conditional branch is encountered, and dynamic branch prediction is\n  used for succeeding executions of the conditional branch code.\n  \n  In order to effectively write your code to take advantage of these\n  rules, when writing if-else or switch statements, check the most\n  common cases first and work progressively down to the least common.\n  Loops do not necessarily require any special ordering of code for\n  static branch prediction, as only the condition of the loop iterator\n  is normally used.\n\n    ", "answerId": 44614591, "date": "2017-06-18 11:40:43Z", "upvoteCount": 205}, {"userId": 6530695, "comments": [], "content": "\r\nBranch-prediction gain!\n\nIt is important to understand that branch misprediction doesn't slow down programs. The cost of a missed prediction is just as if branch prediction didn't exist and you waited for the evaluation of the expression to decide what code to run (further explanation in the next paragraph).\n\nif (expression)\n{\n    // Run 1\n} else {\n    // Run 2\n}\n\n\nWhenever there's an if-else \\ switch statement, the expression has to be evaluated to determine which block should be executed. In the assembly code generated by the compiler, conditional branch instructions are inserted.\n\nA branch instruction can cause a computer to begin executing a different instruction sequence and thus deviate from its default behavior of executing instructions in order (i.e. if the expression is false, the program skips the code of the if block) depending on some condition, which is the expression evaluation in our case.\n\nThat being said, the compiler tries to predict the outcome prior to it being actually evaluated. It will fetch instructions from the if block, and if the expression turns out to be true, then wonderful! We gained the time it took to evaluate it and made progress in the code; if not then we are running the wrong code, the pipeline is flushed, and the correct block is run.\n\nVisualization:\n\nLet's say you need to pick route 1 or route 2. Waiting for your partner to check the map, you have stopped at ## and waited, or you could just pick route1 and if you were lucky (route 1 is the correct route), then great you didn't have to wait for your partner to check the map (you saved the time it would have taken him to check the map), otherwise you will just turn back.\n\nWhile flushing pipelines is super fast, nowadays taking this gamble is worth it. Predicting sorted data or a data that changes slowly is always easier and better than predicting fast changes.\n\n O      Route 1  /-------------------------------\n/|\\             /\n |  ---------##/\n/ \\            \\\n                \\\n        Route 2  \\--------------------------------\n\n    ", "answerId": 45503985, "date": "2017-08-04 10:07:12Z", "upvoteCount": 113}, {"userId": 3378204, "comments": [{"content": "I did not understand shit. Plus because I liked the pictures.", "commentId": 84995474, "date": "2018-02-26 18:44:33Z", "userId": 2988919, "upvoteCount": 4}], "content": "\r\nAs what has already been mentioned by others, what behind the mystery is Branch Predictor. \n\nI'm not trying to add something but explaining the concept in another way. \nThere is a concise introduction on the wiki which contains text and diagram.\nI do like the explanation below which uses a diagram to elaborate the Branch Predictor intuitively.\n\n\n  In computer architecture, a branch predictor is a\n  digital circuit that tries to guess which way a branch (e.g. an\n  if-then-else structure) will go before this is known for sure. The\n  purpose of the branch predictor is to improve the flow in the\n  instruction pipeline. Branch predictors play a critical role in\n  achieving high effective performance in many modern pipelined\n  microprocessor architectures such as x86.\n  \n  Two-way branching is usually implemented with a conditional jump\n  instruction. A conditional jump can either be \"not taken\" and continue\n  execution with the first branch of code which follows immediately\n  after the conditional jump, or it can be \"taken\" and jump to a\n  different place in program memory where the second branch of code is\n  stored. It is not known for certain whether a conditional jump will be\n  taken or not taken until the condition has been calculated and the\n  conditional jump has passed the execution stage in the instruction\n  pipeline (see fig. 1).\n\n\n\n\nBased on the described scenario, I have written an animation demo to show how instructions are executed in a pipeline in different situations.\n\n\nWithout the Branch Predictor. \n\n\n\n  Without branch prediction, the processor would have to wait until the\n  conditional jump instruction has passed the execute stage before the\n  next instruction can enter the fetch stage in the pipeline.\n\n\nThe example contains three instructions and the first one is a conditional jump instruction. The latter two instructions can go into the pipeline until the conditional jump instruction is executed. \n\n\n\nIt will take 9 clock cycles for 3 instructions to be completed.\n\n\nUse Branch Predictor and don't take a conditional jump. Let's assume that the predict is not taking the conditional jump.\n\n\n\n\nIt will take 7 clock cycles for 3 instructions to be completed.\n\n\nUse Branch Predictor and take a conditional jump. Let's assume that the predict is not taking the conditional jump.\n\n\n\n\nIt will take 9 clock cycles for 3 instructions to be completed.\n\n\n  The time that is wasted in case of a branch misprediction is equal to\n  the number of stages in the pipeline from the fetch stage to the\n  execute stage. Modern microprocessors tend to have quite long\n  pipelines so that the misprediction delay is between 10 and 20 clock\n  cycles. As a result, making a pipeline longer increases the need for a\n  more advanced branch predictor.\n\n\nAs you can see, it seems we don't have a reason not to use Branch Predictor.\n\nIt's quite a simple demo that clarifies the very basic part of Branch Predictor. If those gifs are annoying, please feel free to remove them from the answer and visitors can also get the demo from git\n    ", "answerId": 47141245, "date": "2017-11-06 16:15:16Z", "upvoteCount": 92}, {"userId": 5068056, "comments": [{"content": "What is the source/context for the last link?", "commentId": 85639083, "date": "2018-03-16 10:57:45Z", "userId": 63550, "upvoteCount": 0}], "content": "\r\nIt's about branch prediction. What is it?\n\n\nA branch predictor is one of the ancient performance improving techniques which still finds relevance into modern architectures. While the simple prediction techniques provide fast lookup and power efficiency they suffer from a high misprediction rate.\nOn the other hand, complex branch predictions \u2013either neural based or variants of two-level branch prediction \u2013provide better prediction accuracy, but they consume more power and complexity increases exponentially.\nIn addition to this, in complex prediction techniques the time taken to predict the branches is itself very high \u2013ranging from 2 to 5 cycles \u2013which is comparable to the execution time of actual branches.\nBranch prediction is essentially an optimization (minimization) problem where the emphasis is on to achieve lowest possible miss rate, low power consumption, and low complexity with minimum resources.\n\n\nThere really are three different kinds of branches:\n\nForward conditional branches - based on a run-time condition, the PC (program counter) is changed to point to an address forward in the instruction stream.\n\nBackward conditional branches - the PC is changed to point backward in the instruction stream. The branch is based on some condition, such as branching backwards to the beginning of a program loop when a test at the end of the loop states the loop should be executed again.\n\nUnconditional branches - this includes jumps, procedure calls and returns that have no specific condition. For example, an unconditional jump instruction might be coded in assembly language as simply \"jmp\", and the instruction stream must immediately be directed to the target location pointed to by the jump instruction, whereas a conditional jump that might be coded as \"jmpne\" would redirect the instruction stream only if the result of a comparison of two values in a previous \"compare\" instructions shows the values to not be equal. (The segmented addressing scheme used by the x86 architecture adds extra complexity, since jumps can be either \"near\" (within a segment) or \"far\" (outside the segment). Each type has different effects on branch prediction algorithms.)\n\nStatic/dynamic Branch Prediction: Static branch prediction is used by the microprocessor the first time a conditional branch is encountered, and dynamic branch prediction is used for succeeding executions of the conditional branch code.\n\nReferences:\n\n\nBranch predictor\nA Demonstration of Self-Profiling\nBranch Prediction Review\nBranch Prediction\n\n    ", "answerId": 46541691, "date": "2017-10-03 09:47:54Z", "upvoteCount": 68}, {"userId": 536086, "comments": [], "content": "\r\nBesides the fact that the branch prediction may slow you down, a sorted array has another advantage:   \n\nYou can have a stop condition instead of just checking the value, this way you only loop over the relevant data, and ignore the rest.\nThe branch prediction will miss only once.\n\n // sort backwards (higher values first)\n std::sort(data, data + arraySize, std::greater<int>());\n\n for (unsigned c = 0; c < arraySize; ++c) {\n       if (data[c] < 128) {\n              break;\n       }\n       sum += data[c];               \n }\n\n    ", "answerId": 47457772, "date": "2017-11-23 14:28:29Z", "upvoteCount": 49}, {"userId": 3950982, "comments": [{"content": "Are you saying that every instruction can be conditional? So, multiple instructions with the GE suffix could be performed sequentially, without changing the value of R3 in between?", "commentId": 87680544, "date": "2018-05-14 14:04:03Z", "userId": 712526, "upvoteCount": 0}, {"content": "Yes, correct, every instruction can be conditional on ARM, at least in the 32 and 64 bit instruction sets. There's a devoted 4-bit condition field. You can have several instructions in a row with the same condition, but at some point, if the chance of the condition being false is non-negligible, then it is more efficient to add a branch.", "commentId": 87727742, "date": "2018-05-15 17:06:42Z", "userId": 3950982, "upvoteCount": 0}, {"content": "The other innovation in ARM is the addition of the S instruction suffix, also optional on (almost) all instructions, which if absent, prevents instructions from changing status bits (with the exception of the CMP instruction, whose job is to set status bits, so it doesn't need the S suffix). This allows you to avoid CMP instructions in many cases, as long as the comparison is with zero or similar (eg. SUBS R0, R0, #1 will set the Z (Zero) bit when R0 reaches zero). Conditionals and the S suffix incur zero overhead. It's quite a beautiful ISA.", "commentId": 87727753, "date": "2018-05-15 17:06:54Z", "userId": 3950982, "upvoteCount": 0}, {"content": "Not adding the S suffix allows you to have several conditional instructions in a row without worrying that one of them might change the status bits, which might otherwise have the side effect of skipping the rest of the conditional instructions.", "commentId": 87727802, "date": "2018-05-15 17:08:22Z", "userId": 3950982, "upvoteCount": 0}], "content": "\r\nOn ARM, there is no branch needed, because every instruction has a 4-bit condition field, which is tested at zero cost. This eliminates the need for short branches, and there would be no branch prediction hit. Therefore, the sorted version would run slower than the unsorted version on ARM, because of the extra overhead of sorting. The inner loop would look something like the following:\n\nMOV R0, #0     // R0 = sum = 0\nMOV R1, #0     // R1 = c = 0\nADR R2, data   // R2 = addr of data array (put this instruction outside outer loop)\n.inner_loop    // Inner loop branch label\n    LDRB R3, [R2, R1]     // R3 = data[c]\n    CMP R3, #128          // compare R3 to 128\n    ADDGE R0, R0, R3      // if R3 >= 128, then sum += data[c] -- no branch needed!\n    ADD R1, R1, #1        // c++\n    CMP R1, #arraySize    // compare c to arraySize\n    BLT inner_loop        // Branch to inner_loop if c < arraySize\n\n    ", "answerId": 47942152, "date": "2017-12-22 13:13:05Z", "upvoteCount": 43}, {"userId": 8459055, "comments": [], "content": "\r\nIn simple words: Summary of everyone's wonderful answers for beginners... \n\nThis happens due to something called the branch prediction.\n\nBasically the computer predicts the next step and executes it. If it's wrong, it comes one step back and executes with another prediction and if it's right, then it will just continue.\n\nThe answer your question is very simple. If the array is unsorted, the computer has to make many predictions which may lead to an increased chance of errors. But if the data is sorted, the computer makes fewer predictions and there is less chance of error.\n\nSorted Array: Straight Road\n\n____________________________________________________________________________ \n-\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 -\u00a0 \nTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT \n\nUnsorted Array: Curved Road \n______\u00a0\u00a0\u00a0\u00a0\u00a0_______ \n|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|__|\n\nBranch prediction: Guessing/predicting which road is straight and following it without checking \n___________________________________________ Straight road \n\u00a0\u00a0\u00a0|_________________________________________|Longer road\n\nAlthough both the roads reach the same destination, the straight road is shorter, and the other is longer. If then you choose the other by mistake, there is no turning back, and so you will waste some extra time if you choose the longer road. This is similar to what happens in the computer, and I hope this helped you understand better.\n    ", "answerId": 47700573, "date": "2017-12-07 17:28:29Z", "upvoteCount": 23}], "date": "2012-06-27 13:51:36Z", "selectedAnswer": 11227902, "title": "Why is it faster to process a sorted array than an unsorted array?", "comments": [{"content": "Just for the record. On Windows / VS2017 / i7-6700K 4GHz there is NO difference between two versions. It takes 0.6s for both cases. If number of iterations in the external loop is increased 10 times the execution time increases 10 times too to 6s in both cases.", "commentId": 81584779, "date": "2017-11-15 20:45:37Z", "userId": 194715, "upvoteCount": 0}, {"content": "@user194715: any compiler that uses a cmov or other branchless implementation (like auto-vectorization with pcmpgtd) will have performance that's not data dependent on any CPU.  But if it's branchy, it will be sort-dependent on any CPU with out-of-order speculative execution.  (Even high-performance in-order CPUs use branch-prediction to avoid fetch/decode bubbles on taken branches; the miss penalty is smaller).", "commentId": 82919488, "date": "2017-12-26 07:14:57Z", "userId": 224132, "upvoteCount": 0}, {"content": "Woops... re: Meltdown and Spectre", "commentId": 83206878, "date": "2018-01-05 14:21:47Z", "userId": 1366033, "upvoteCount": 0}, {"content": "@KyleMit does it have something to do with both? I haven't read much on both", "commentId": 83342636, "date": "2018-01-10 06:26:02Z", "userId": 2577465, "upvoteCount": 0}, {"content": "@mohitmun, both of those security flaws fit into a broad category of vulnerabilities classified as \u201cbranch target injection\u201d attacks", "commentId": 83359003, "date": "2018-01-10 14:26:37Z", "userId": 1366033, "upvoteCount": 0}], "content": "\r\n\r\nHere is a piece of C++ code that seems very peculiar. For some strange reason, sorting the data miraculously makes the code almost six times faster.\n\n#include <algorithm>\n#include <ctime>\n#include <iostream>\n\nint main()\n{\n    // Generate data\n    const unsigned arraySize = 32768;\n    int data[arraySize];\n\n    for (unsigned c = 0; c < arraySize; ++c)\n        data[c] = std::rand() % 256;\n\n    // !!! With this, the next loop runs faster\n    std::sort(data, data + arraySize);\n\n    // Test\n    clock_t start = clock();\n    long long sum = 0;\n\n    for (unsigned i = 0; i < 100000; ++i)\n    {\n        // Primary loop\n        for (unsigned c = 0; c < arraySize; ++c)\n        {\n            if (data[c] >= 128)\n                sum += data[c];\n        }\n    }\n\n    double elapsedTime = static_cast<double>(clock() - start) / CLOCKS_PER_SEC;\n\n    std::cout << elapsedTime << std::endl;\n    std::cout << \"sum = \" << sum << std::endl;\n}\n\n\n\nWithout std::sort(data, data + arraySize);, the code runs in 11.54 seconds.\nWith the sorted data, the code runs in 1.93 seconds.\n\n\nInitially, I thought this might be just a language or compiler anomaly. So I tried it in Java.\n\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        // Generate data\n        int arraySize = 32768;\n        int data[] = new int[arraySize];\n\n        Random rnd = new Random(0);\n        for (int c = 0; c < arraySize; ++c)\n            data[c] = rnd.nextInt() % 256;\n\n        // !!! With this, the next loop runs faster\n        Arrays.sort(data);\n\n        // Test\n        long start = System.nanoTime();\n        long sum = 0;\n\n        for (int i = 0; i < 100000; ++i)\n        {\n            // Primary loop\n            for (int c = 0; c < arraySize; ++c)\n            {\n                if (data[c] >= 128)\n                    sum += data[c];\n            }\n        }\n\n        System.out.println((System.nanoTime() - start) / 1000000000.0);\n        System.out.println(\"sum = \" + sum);\n    }\n}\n\n\nWith a somewhat similar but less extreme result.\n\n\n\nMy first thought was that sorting brings the data into the cache, but then I thought how silly that is because the array was just generated.\n\n\nWhat is going on?\nWhy is it faster to process a sorted array than an unsorted array?\nThe code is summing up some independent terms, and the order should not matter.\n\n    ", "favoriteCount": 9848, "upvoteCount": 21384}, "users": [{"userId": 87234, "reputation": 284327, "pseudo": "GManNickG"}, {"userId": 4909087, "reputation": 91395, "pseudo": "coldspeed"}, {"userId": 922184, "reputation": 362525, "pseudo": "Mysticial"}, {"userId": 3053978, "reputation": 337, "pseudo": "Shankar"}, {"userId": 1011995, "reputation": 156963, "pseudo": "Daniel Fischer"}, {"userId": -1, "reputation": 1, "pseudo": "Community"}, {"userId": 866732, "reputation": 32743, "pseudo": "WiSaGaN"}, {"userId": 3448527, "reputation": 35888, "pseudo": "dippas"}, {"userId": 863980, "reputation": 23272, "pseudo": "vulcan raven"}, {"userId": 63550, "reputation": 12506, "pseudo": "Peter Mortensen"}, {"userId": 134633, "reputation": 182667, "pseudo": "caf"}, {"userId": 2326172, "reputation": 443, "pseudo": "Saheb"}, {"userId": 1031591, "reputation": 21637, "pseudo": "atlaste"}, {"userId": 1012551, "reputation": 12336, "pseudo": "Saqlain"}, {"userId": 25847, "reputation": 39302, "pseudo": "Mark Rogers"}, {"userId": 166949, "reputation": 51083, "pseudo": "steveha"}, {"userId": 1196549, "reputation": 33035, "pseudo": "Yves Daoust"}, {"userId": 1627741, "reputation": 7118, "pseudo": "Harsh Sharma"}, {"userId": 234175, "reputation": 15628, "pseudo": "greatwolf"}, {"userId": 4013258, "reputation": 9212, "pseudo": "Surt"}, {"userId": 1372621, "reputation": 2951, "pseudo": "Stacked"}, {"userId": 1313233, "reputation": 9088, "pseudo": "rkachach"}, {"userId": 4895229, "reputation": 6181, "pseudo": "Maciej"}, {"userId": 601567, "reputation": 2828, "pseudo": "ForeverLearning"}, {"userId": 5423108, "reputation": 31546, "pseudo": "Alireza"}, {"userId": 6530695, "reputation": 5123, "pseudo": "Tony"}, {"userId": 3378204, "reputation": 3576, "pseudo": "Gearon"}, {"userId": 5068056, "reputation": 3624, "pseudo": "aghilpro"}, {"userId": 7470253, "reputation": 2106, "pseudo": "M. Prokhorov"}, {"userId": 536086, "reputation": 32748, "pseudo": "Yochai Timmer"}, {"userId": 712526, "reputation": 3486, "pseudo": "jpaugh"}, {"userId": 3950982, "reputation": 2121, "pseudo": "Luke Hutchison"}, {"userId": 8459055, "reputation": 643, "pseudo": "Omkaar.K"}]}